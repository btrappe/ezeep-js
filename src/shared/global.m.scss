/**
 *
 * Modules
 *
 */

@use 'sass:math';
@use 'sass:map';
@use 'sass:list';
@use 'sass:color';

/**
 *
 * Variables
 *
 */

$breakpoints: (
  'sm': 480px,
  'md': 800px,
  'lg': 1120px,
);
$colors: (
  'light': (
    'main-primary': rgb(31 144 178),
    'main-secondary': rgb(48 154 189),
    'main-tertiary': rgb(1 133 167),
    'accent-primary': rgb(207 65 96),
    'accent-secondary': rgb(219 77 106),
    'accent-tertiary': rgb(195 53 87),
    'on-main-primary': rgb(255 255 255),
    'on-accent-primary': rgb(255 255 255),
    'surface-primary': rgb(255 255 255),
    'surface-secondary': rgb(243 243 243),
    'surface-tertiary': rgb(255 255 255),
    'shade-primary': rgba(119 119 119 / 6%),
    'shade-secondary': rgba(119 119 119 / 10%),
    'shade-tertiary': rgba(119 119 119 / 16%),
    'foreground-primary': rgba(0 0 0 / 94%),
    'foreground-secondary': rgba(99 99 99 / 90%),
    'foreground-tertiary': rgba(99 99 99 / 58%),
    'outline-solid-primary': rgb(226 226 226),
    'outline-solid-secondary': rgb(209 209 209),
    'outline-translucent-primary': rgba(119 119 119 / 10%),
    'outline-translucent-secondary': rgba(119 119 119 / 16%),
    'outline-translucent-tertiary': rgba(119 119 119 / 22%),
    'overlay': rgba(0 0 0 / 26%),
    'shadow': rgba(0 0 0 / 10%),
  ),
  'dark': (
    'main-primary': rgb(48 154 189),
    'main-secondary': rgb(63 165 200),
    'main-tertiary': rgb(31 144 178),
    'accent-primary': rgb(219 77 106),
    'accent-secondary': rgb(232 88 116),
    'accent-tertiary': rgb(207 65 96),
    'on-main-primary': rgb(0 0 0),
    'on-accent-primary': rgb(0 0 0),
    'surface-primary': rgb(0 0 0),
    'surface-secondary': rgb(27 27 27),
    'surface-tertiary': rgb(40 40 40),
    'shade-primary': rgba(119 119 119 / 16%),
    'shade-secondary': rgba(119 119 119 / 22%),
    'shade-tertiary': rgba(119 119 119 / 28%),
    'foreground-primary': rgba(255 255 255 / 94%),
    'foreground-secondary': rgba(139 139 139 / 90%),
    'foreground-tertiary': rgba(139 139 139 / 58%),
    'outline-solid-primary': rgb(40 40 40),
    'outline-solid-secondary': rgb(62 62 62),
    'outline-translucent-primary': rgba(119 119 119 / 28%),
    'outline-translucent-secondary': rgba(119 119 119 / 34%),
    'outline-translucent-tertiary': rgba(119 119 119 / 40%),
    'overlay': rgba(0 0 0 / 68%),
    'shadow': rgba(0 0 0 / 26%),
  ),
);
$font-features: 'calt', 'liga', 'case', 'ss03', 'zero', 'cv05', 'cv10';
$font-path: '../assets/fonts';
$font-styles: (
  'Regular': (
    normal,
    400,
  ),
  'Medium': (
    normal,
    500,
  ),
  'SemiBold': (
    normal,
    600,
  ),
);
$font-weights: (('soft', 400), ('strong', 500), ('heavy', 600));
$spacings: (4px, 6px, 10px, 16px, 26px, 42px, 68px);
$easings: (
  'in-quart': cubic-bezier(0.11, 0, 0.5, 0),
  'in-out-quart': cubic-bezier(0.76, 0, 0.24, 1),
  'in-out-cubic': cubic-bezier(0.65, 0, 0.35, 1),
  'in-expo': cubic-bezier(0.7, 0, 0.84, 0),
  'out-quart': cubic-bezier(0.25, 1, 0.5, 1),
  'out-expo': cubic-bezier(0.16, 1, 0.3, 1),
);
$ratios: (1, 2, 3);

/**
 *
 * Functions
 *
 */

@function get-typo-track($scale) {
  $a: -0.0223;
  $b: 0.185;
  $c: -0.1745;
  $d: $scale / 1px;
  $track: ($a + ($b * math.pow(math.$e, $c * $d))) * 1em;

  @return $track;
}

@function get-typo-offset($scale, $lead) {
  $upm: 2816;
  $cap-height: 2048;
  $box-height: 2 * math.round((($cap-height / $upm) * $scale) / 2);
  $offset: ($lead - $box-height) / 2;

  @return $offset;
}

@function get-color-display-p3($color) {
  $red: color.red($color) / 255;
  $green: color.green($color) / 255;
  $blue: color.blue($color) / 255;
  $alpha: color.alpha($color) * 100%;
  $display-p3: color(display-p3 #{$red} #{$green} #{$blue} / #{$alpha});

  @return $display-p3;
}

/**
 *
 * Mixins
 *
 */

@mixin media-viewport($breakpoint, $direction: 'min', $dimension: 'width') {
  @media (#{$direction}-#{$dimension}: #{map.get($breakpoints, $breakpoint)}) {
    @content;
  }
}

@mixin media-input($device) {
  @media (pointer: #{if($device == 'touch', 'coarse', 'fine')}) {
    @content;
  }
}

@mixin media-appearance($appearance) {
  @media (prefers-color-scheme: #{$appearance}) {
    @content;
  }
}

@mixin media-density($ratio) {
  @media (-webkit-min-device-pixel-ratio: #{$ratio}), (min-device-pixel-ratio: #{$ratio}) {
    @content;
  }
}

@mixin color-declaration($appearance) {
  @each $name, $value in map.get($colors, $appearance) {
    --color-#{$name}: #{$value};
  }

  @supports (color: color(display-p3 1 1 1)) {
    @each $name, $value in map.get($colors, $appearance) {
      --color-#{$name}: #{get-color-display-p3($value)};
    }
  }
}

@mixin hairline-declaration() {
  @each $ratio in $ratios {
    @include media-density($ratio) {
      --hairline-positive: calc(1px / #{$ratio});
      --hairline-negative: calc(-1px / #{$ratio});
    }
  }
}

@mixin spacing-declaration() {
  @each $spacing in $spacings {
    --spacing-#{list.index($spacings, $spacing)}: #{$spacing};
  }
}

@mixin easing-declaration() {
  @each $easing in $easings {
    --easing-#{list.nth($easing, 1)}: #{list.nth($easing, 2)};
  }
}

@mixin typo-declaration($props, $name, $height: true, $offset: true) {
  --#{$name}-size: #{list.nth($props, 1)};
  --#{$name}-spacing: #{get-typo-track(list.nth($props, 1))};

  @if ($height) {
    --#{$name}-height: #{list.nth($props, 2)};
  }

  @if ($offset) {
    --#{$name}-offset: #{get-typo-offset(list.nth($props, 1), list.nth($props, 2))};
  }
}

@mixin typo-level-declaration($levels, $name) {
  @each $level, $props in $levels {
    :host(.#{$level}) {
      @include typo-declaration($props, $name);
    }
  }
}

@mixin typo-trim-offset($name) {
  & {
    padding-bottom: 1px;
    padding-top: 1px;
  }

  &::before,
  &::after {
    content: '';
    display: block;
    height: 0;
  }

  &:before {
    margin-top: calc((var(--#{$name}-offset) + 1px) * -1);
  }

  &:after {
    margin-bottom: calc((var(--#{$name}-offset) + 1px) * -1);
  }
}

@mixin typo-weight-declaration($name) {
  @each $weight in $font-weights {
    :host(.#{list.nth($weight, 1)}) {
      --#{$name}-weight: #{list.nth($weight, 2)};
    }
  }
}
