/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IconButtonLevelTypes, IconButtonTypeTypes, IconNameTypes, SelectFlowTypes, SelectOptionType, TextButtonLevelTypes, TextButtonTypeTypes, TypoBodyLevelTypes, TypoHeadingLevelTypes, TypoHeadingTagTypes, TypoWeightTypes } from "./shared/types";
export namespace Components {
    interface EjsAuth {
        "clientID": string;
        "redirectURI": string;
    }
    interface EjsIcon {
        /**
          * Description...
         */
        "name": IconNameTypes;
    }
    interface EjsIconButton {
        /**
          * Description...
         */
        "blank": boolean;
        /**
          * Description...
         */
        "disabled": boolean;
        /**
          * Description...
         */
        "href": string;
        /**
          * Description...
         */
        "icon": IconNameTypes;
        /**
          * Description...
         */
        "level": IconButtonLevelTypes;
        /**
          * Description...
         */
        "type": IconButtonTypeTypes;
    }
    interface EjsPrint {
    }
    interface EjsRoot {
        /**
          * Description...
         */
        "closePrint": () => Promise<void>;
        /**
          * Description...
         */
        "openPrint": () => Promise<void>;
    }
    interface EjsSelect {
        /**
          * Description...
         */
        "icon": IconNameTypes;
        /**
          * Description...
         */
        "label": string;
        /**
          * Description...
         */
        "optionFlow": SelectFlowTypes;
        /**
          * Description...
         */
        "options": SelectOptionType[];
        /**
          * Description...
         */
        "placeholder": string;
        /**
          * Description...
         */
        "toggleFlow": SelectFlowTypes;
    }
    interface EjsTextButton {
        /**
          * Description...
         */
        "blank": boolean;
        /**
          * Description...
         */
        "disabled": boolean;
        /**
          * Description...
         */
        "href": string;
        /**
          * Description...
         */
        "level": TextButtonLevelTypes;
        /**
          * Description...
         */
        "type": TextButtonTypeTypes;
    }
    interface EjsTypoBody {
        /**
          * Description...
         */
        "level": TypoBodyLevelTypes;
        /**
          * Description...
         */
        "weight": TypoWeightTypes;
    }
    interface EjsTypoHeading {
        /**
          * Description...
         */
        "level": TypoHeadingLevelTypes;
        /**
          * Description...
         */
        "tag": TypoHeadingTagTypes;
        /**
          * Description...
         */
        "weight": TypoWeightTypes;
    }
}
declare global {
    interface HTMLEjsAuthElement extends Components.EjsAuth, HTMLStencilElement {
    }
    var HTMLEjsAuthElement: {
        prototype: HTMLEjsAuthElement;
        new (): HTMLEjsAuthElement;
    };
    interface HTMLEjsIconElement extends Components.EjsIcon, HTMLStencilElement {
    }
    var HTMLEjsIconElement: {
        prototype: HTMLEjsIconElement;
        new (): HTMLEjsIconElement;
    };
    interface HTMLEjsIconButtonElement extends Components.EjsIconButton, HTMLStencilElement {
    }
    var HTMLEjsIconButtonElement: {
        prototype: HTMLEjsIconButtonElement;
        new (): HTMLEjsIconButtonElement;
    };
    interface HTMLEjsPrintElement extends Components.EjsPrint, HTMLStencilElement {
    }
    var HTMLEjsPrintElement: {
        prototype: HTMLEjsPrintElement;
        new (): HTMLEjsPrintElement;
    };
    interface HTMLEjsRootElement extends Components.EjsRoot, HTMLStencilElement {
    }
    var HTMLEjsRootElement: {
        prototype: HTMLEjsRootElement;
        new (): HTMLEjsRootElement;
    };
    interface HTMLEjsSelectElement extends Components.EjsSelect, HTMLStencilElement {
    }
    var HTMLEjsSelectElement: {
        prototype: HTMLEjsSelectElement;
        new (): HTMLEjsSelectElement;
    };
    interface HTMLEjsTextButtonElement extends Components.EjsTextButton, HTMLStencilElement {
    }
    var HTMLEjsTextButtonElement: {
        prototype: HTMLEjsTextButtonElement;
        new (): HTMLEjsTextButtonElement;
    };
    interface HTMLEjsTypoBodyElement extends Components.EjsTypoBody, HTMLStencilElement {
    }
    var HTMLEjsTypoBodyElement: {
        prototype: HTMLEjsTypoBodyElement;
        new (): HTMLEjsTypoBodyElement;
    };
    interface HTMLEjsTypoHeadingElement extends Components.EjsTypoHeading, HTMLStencilElement {
    }
    var HTMLEjsTypoHeadingElement: {
        prototype: HTMLEjsTypoHeadingElement;
        new (): HTMLEjsTypoHeadingElement;
    };
    interface HTMLElementTagNameMap {
        "ejs-auth": HTMLEjsAuthElement;
        "ejs-icon": HTMLEjsIconElement;
        "ejs-icon-button": HTMLEjsIconButtonElement;
        "ejs-print": HTMLEjsPrintElement;
        "ejs-root": HTMLEjsRootElement;
        "ejs-select": HTMLEjsSelectElement;
        "ejs-text-button": HTMLEjsTextButtonElement;
        "ejs-typo-body": HTMLEjsTypoBodyElement;
        "ejs-typo-heading": HTMLEjsTypoHeadingElement;
    }
}
declare namespace LocalJSX {
    interface EjsAuth {
        "clientID"?: string;
        "redirectURI"?: string;
    }
    interface EjsIcon {
        /**
          * Description...
         */
        "name": IconNameTypes;
    }
    interface EjsIconButton {
        /**
          * Description...
         */
        "blank"?: boolean;
        /**
          * Description...
         */
        "disabled"?: boolean;
        /**
          * Description...
         */
        "href"?: string;
        /**
          * Description...
         */
        "icon": IconNameTypes;
        /**
          * Description...
         */
        "level"?: IconButtonLevelTypes;
        /**
          * Description...
         */
        "type"?: IconButtonTypeTypes;
    }
    interface EjsPrint {
        /**
          * Description...
         */
        "onPrintCancel"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * Description...
         */
        "onPrintSubmit"?: (event: CustomEvent<MouseEvent>) => void;
    }
    interface EjsRoot {
    }
    interface EjsSelect {
        /**
          * Description...
         */
        "icon"?: IconNameTypes;
        /**
          * Description...
         */
        "label"?: string;
        /**
          * Events
         */
        "onSelectToggle"?: (event: CustomEvent<any>) => void;
        /**
          * Description...
         */
        "optionFlow"?: SelectFlowTypes;
        /**
          * Description...
         */
        "options"?: SelectOptionType[];
        /**
          * Description...
         */
        "placeholder"?: string;
        /**
          * Description...
         */
        "toggleFlow"?: SelectFlowTypes;
    }
    interface EjsTextButton {
        /**
          * Description...
         */
        "blank"?: boolean;
        /**
          * Description...
         */
        "disabled"?: boolean;
        /**
          * Description...
         */
        "href"?: string;
        /**
          * Description...
         */
        "level"?: TextButtonLevelTypes;
        /**
          * Description...
         */
        "type"?: TextButtonTypeTypes;
    }
    interface EjsTypoBody {
        /**
          * Description...
         */
        "level"?: TypoBodyLevelTypes;
        /**
          * Description...
         */
        "weight"?: TypoWeightTypes;
    }
    interface EjsTypoHeading {
        /**
          * Description...
         */
        "level"?: TypoHeadingLevelTypes;
        /**
          * Description...
         */
        "tag"?: TypoHeadingTagTypes;
        /**
          * Description...
         */
        "weight"?: TypoWeightTypes;
    }
    interface IntrinsicElements {
        "ejs-auth": EjsAuth;
        "ejs-icon": EjsIcon;
        "ejs-icon-button": EjsIconButton;
        "ejs-print": EjsPrint;
        "ejs-root": EjsRoot;
        "ejs-select": EjsSelect;
        "ejs-text-button": EjsTextButton;
        "ejs-typo-body": EjsTypoBody;
        "ejs-typo-heading": EjsTypoHeading;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ejs-auth": LocalJSX.EjsAuth & JSXBase.HTMLAttributes<HTMLEjsAuthElement>;
            "ejs-icon": LocalJSX.EjsIcon & JSXBase.HTMLAttributes<HTMLEjsIconElement>;
            "ejs-icon-button": LocalJSX.EjsIconButton & JSXBase.HTMLAttributes<HTMLEjsIconButtonElement>;
            "ejs-print": LocalJSX.EjsPrint & JSXBase.HTMLAttributes<HTMLEjsPrintElement>;
            "ejs-root": LocalJSX.EjsRoot & JSXBase.HTMLAttributes<HTMLEjsRootElement>;
            "ejs-select": LocalJSX.EjsSelect & JSXBase.HTMLAttributes<HTMLEjsSelectElement>;
            "ejs-text-button": LocalJSX.EjsTextButton & JSXBase.HTMLAttributes<HTMLEjsTextButtonElement>;
            "ejs-typo-body": LocalJSX.EjsTypoBody & JSXBase.HTMLAttributes<HTMLEjsTypoBodyElement>;
            "ejs-typo-heading": LocalJSX.EjsTypoHeading & JSXBase.HTMLAttributes<HTMLEjsTypoHeadingElement>;
        }
    }
}
