import { getRenderingRef, forceUpdate, attachShadow, createEvent, h, Host, getAssetPath, proxyCustomElement } from '@stencil/core/internal/client';
export { setAssetPath, setPlatformOptions } from '@stencil/core/internal/client';
import '@cgoern/cap';

const appGlobalScript = async () => {
  const font = new FontFace('Inter', 'url(https://rsms.me/inter/font-files/Inter-roman.var.woff2)', {
    style: 'normal',
    weight: '400 600',
  });
  font.load().then(() => {
    document.fonts.add(font);
  });
};

const globalScripts = appGlobalScript;

const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = ({ on }) => {
    const elmsToUpdate = new Map();
    if (typeof getRenderingRef === 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        on('dispose', () => {
            elmsToUpdate.clear();
        });
        on('get', (propName) => {
            const elm = getRenderingRef();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        });
        on('set', (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(forceUpdate));
            }
            cleanupElements(elmsToUpdate);
        });
        on('reset', () => {
            elmsToUpdate.forEach((elms) => elms.forEach(forceUpdate));
            cleanupElements(elmsToUpdate);
        });
    }
};

const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    let states = new Map(Object.entries(defaultState !== null && defaultState !== void 0 ? defaultState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        states = new Map(Object.entries(defaultState !== null && defaultState !== void 0 ? defaultState : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(defaultState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        const unReset = on('reset', () => cb(defaultState[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => subscriptions.forEach((subscription) => {
        if (subscription.set) {
            on('set', subscription.set);
        }
        if (subscription.get) {
            on('get', subscription.get);
        }
        if (subscription.reset) {
            on('reset', subscription.reset);
        }
    });
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    stencilSubscription(map);
    return map;
};

function _typeof$1(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$1 = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$1 = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof$1(obj);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? Object(arguments[i]) : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, basedir, module) {
	return module = {
		path: basedir,
		exports: {},
		require: function (path, base) {
			return commonjsRequire();
		}
	}, fn(module, module.exports), module.exports;
}

function getAugmentedNamespace(n) {
	if (n.__esModule) return n;
	var a = Object.defineProperty({}, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var _typeof_1 = createCommonjsModule(function (module) {
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  }

  return _typeof(obj);
}

module.exports = _typeof;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

const _typeof = /*@__PURE__*/getDefaultExportFromCjs(_typeof_1);

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

var consoleLogger = {
  type: 'logger',
  log: function log(args) {
    this.output('log', args);
  },
  warn: function warn(args) {
    this.output('warn', args);
  },
  error: function error(args) {
    this.output('error', args);
  },
  output: function output(type, args) {
    if (console && console[type]) console[type].apply(console, args);
  }
};

var Logger = function () {
  function Logger(concreteLogger) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Logger);

    this.init(concreteLogger, options);
  }

  _createClass(Logger, [{
    key: "init",
    value: function init(concreteLogger) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.prefix = options.prefix || 'i18next:';
      this.logger = concreteLogger || consoleLogger;
      this.options = options;
      this.debug = options.debug;
    }
  }, {
    key: "setDebug",
    value: function setDebug(bool) {
      this.debug = bool;
    }
  }, {
    key: "log",
    value: function log() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return this.forward(args, 'log', '', true);
    }
  }, {
    key: "warn",
    value: function warn() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return this.forward(args, 'warn', '', true);
    }
  }, {
    key: "error",
    value: function error() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return this.forward(args, 'error', '');
    }
  }, {
    key: "deprecate",
    value: function deprecate() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);
    }
  }, {
    key: "forward",
    value: function forward(args, lvl, prefix, debugOnly) {
      if (debugOnly && !this.debug) return null;
      if (typeof args[0] === 'string') args[0] = "".concat(prefix).concat(this.prefix, " ").concat(args[0]);
      return this.logger[lvl](args);
    }
  }, {
    key: "create",
    value: function create(moduleName) {
      return new Logger(this.logger, _objectSpread({}, {
        prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
      }, this.options));
    }
  }]);

  return Logger;
}();

var baseLogger = new Logger();

var EventEmitter = function () {
  function EventEmitter() {
    _classCallCheck(this, EventEmitter);

    this.observers = {};
  }

  _createClass(EventEmitter, [{
    key: "on",
    value: function on(events, listener) {
      var _this = this;

      events.split(' ').forEach(function (event) {
        _this.observers[event] = _this.observers[event] || [];

        _this.observers[event].push(listener);
      });
      return this;
    }
  }, {
    key: "off",
    value: function off(event, listener) {
      if (!this.observers[event]) return;

      if (!listener) {
        delete this.observers[event];
        return;
      }

      this.observers[event] = this.observers[event].filter(function (l) {
        return l !== listener;
      });
    }
  }, {
    key: "emit",
    value: function emit(event) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (this.observers[event]) {
        var cloned = [].concat(this.observers[event]);
        cloned.forEach(function (observer) {
          observer.apply(void 0, args);
        });
      }

      if (this.observers['*']) {
        var _cloned = [].concat(this.observers['*']);

        _cloned.forEach(function (observer) {
          observer.apply(observer, [event].concat(args));
        });
      }
    }
  }]);

  return EventEmitter;
}();

function defer() {
  var res;
  var rej;
  var promise = new Promise(function (resolve, reject) {
    res = resolve;
    rej = reject;
  });
  promise.resolve = res;
  promise.reject = rej;
  return promise;
}
function makeString(object) {
  if (object == null) return '';
  return '' + object;
}
function copy(a, s, t) {
  a.forEach(function (m) {
    if (s[m]) t[m] = s[m];
  });
}

function getLastOfPath(object, path, Empty) {
  function cleanKey(key) {
    return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;
  }

  function canNotTraverseDeeper() {
    return !object || typeof object === 'string';
  }

  var stack = typeof path !== 'string' ? [].concat(path) : path.split('.');

  while (stack.length > 1) {
    if (canNotTraverseDeeper()) return {};
    var key = cleanKey(stack.shift());
    if (!object[key] && Empty) object[key] = new Empty();

    if (Object.prototype.hasOwnProperty.call(object, key)) {
      object = object[key];
    } else {
      object = {};
    }
  }

  if (canNotTraverseDeeper()) return {};
  return {
    obj: object,
    k: cleanKey(stack.shift())
  };
}

function setPath(object, path, newValue) {
  var _getLastOfPath = getLastOfPath(object, path, Object),
      obj = _getLastOfPath.obj,
      k = _getLastOfPath.k;

  obj[k] = newValue;
}
function pushPath(object, path, newValue, concat) {
  var _getLastOfPath2 = getLastOfPath(object, path, Object),
      obj = _getLastOfPath2.obj,
      k = _getLastOfPath2.k;

  obj[k] = obj[k] || [];
  if (concat) obj[k] = obj[k].concat(newValue);
  if (!concat) obj[k].push(newValue);
}
function getPath(object, path) {
  var _getLastOfPath3 = getLastOfPath(object, path),
      obj = _getLastOfPath3.obj,
      k = _getLastOfPath3.k;

  if (!obj) return undefined;
  return obj[k];
}
function getPathWithDefaults(data, defaultData, key) {
  var value = getPath(data, key);

  if (value !== undefined) {
    return value;
  }

  return getPath(defaultData, key);
}
function deepExtend(target, source, overwrite) {
  for (var prop in source) {
    if (prop !== '__proto__' && prop !== 'constructor') {
      if (prop in target) {
        if (typeof target[prop] === 'string' || target[prop] instanceof String || typeof source[prop] === 'string' || source[prop] instanceof String) {
          if (overwrite) target[prop] = source[prop];
        } else {
          deepExtend(target[prop], source[prop], overwrite);
        }
      } else {
        target[prop] = source[prop];
      }
    }
  }

  return target;
}
function regexEscape(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
}
var _entityMap = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;',
  '/': '&#x2F;'
};
function escape(data) {
  if (typeof data === 'string') {
    return data.replace(/[&<>"'\/]/g, function (s) {
      return _entityMap[s];
    });
  }

  return data;
}
var isIE10 = typeof window !== 'undefined' && window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf('MSIE') > -1;
var chars = [' ', ',', '?', '!', ';'];
function looksLikeObjectPath(key, nsSeparator, keySeparator) {
  nsSeparator = nsSeparator || '';
  keySeparator = keySeparator || '';
  var possibleChars = chars.filter(function (c) {
    return nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0;
  });
  if (possibleChars.length === 0) return true;
  var r = new RegExp("(".concat(possibleChars.map(function (c) {
    return c === '?' ? '\\?' : c;
  }).join('|'), ")"));
  var matched = !r.test(key);

  if (!matched) {
    var ki = key.indexOf(keySeparator);

    if (ki > 0 && !r.test(key.substring(0, ki))) {
      matched = true;
    }
  }

  return matched;
}

function deepFind(obj, path) {
  var keySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';
  if (!obj) return undefined;
  if (obj[path]) return obj[path];
  var paths = path.split(keySeparator);
  var current = obj;

  for (var i = 0; i < paths.length; ++i) {
    if (!current) return undefined;

    if (typeof current[paths[i]] === 'string' && i + 1 < paths.length) {
      return undefined;
    }

    if (current[paths[i]] === undefined) {
      var j = 2;
      var p = paths.slice(i, i + j).join(keySeparator);
      var mix = current[p];

      while (mix === undefined && paths.length > i + j) {
        j++;
        p = paths.slice(i, i + j).join(keySeparator);
        mix = current[p];
      }

      if (mix === undefined) return undefined;
      if (typeof mix === 'string') return mix;
      if (p && typeof mix[p] === 'string') return mix[p];
      var joinedPath = paths.slice(i + j).join(keySeparator);
      if (joinedPath) return deepFind(mix, joinedPath, keySeparator);
      return undefined;
    }

    current = current[paths[i]];
  }

  return current;
}

var ResourceStore = function (_EventEmitter) {
  _inherits(ResourceStore, _EventEmitter);

  function ResourceStore(data) {
    var _this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      ns: ['translation'],
      defaultNS: 'translation'
    };

    _classCallCheck(this, ResourceStore);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResourceStore).call(this));

    if (isIE10) {
      EventEmitter.call(_assertThisInitialized(_this));
    }

    _this.data = data || {};
    _this.options = options;

    if (_this.options.keySeparator === undefined) {
      _this.options.keySeparator = '.';
    }

    if (_this.options.ignoreJSONStructure === undefined) {
      _this.options.ignoreJSONStructure = true;
    }

    return _this;
  }

  _createClass(ResourceStore, [{
    key: "addNamespaces",
    value: function addNamespaces(ns) {
      if (this.options.ns.indexOf(ns) < 0) {
        this.options.ns.push(ns);
      }
    }
  }, {
    key: "removeNamespaces",
    value: function removeNamespaces(ns) {
      var index = this.options.ns.indexOf(ns);

      if (index > -1) {
        this.options.ns.splice(index, 1);
      }
    }
  }, {
    key: "getResource",
    value: function getResource(lng, ns, key) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
      var ignoreJSONStructure = options.ignoreJSONStructure !== undefined ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
      var path = [lng, ns];
      if (key && typeof key !== 'string') path = path.concat(key);
      if (key && typeof key === 'string') path = path.concat(keySeparator ? key.split(keySeparator) : key);

      if (lng.indexOf('.') > -1) {
        path = lng.split('.');
      }

      var result = getPath(this.data, path);
      if (result || !ignoreJSONStructure || typeof key !== 'string') return result;
      return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
    }
  }, {
    key: "addResource",
    value: function addResource(lng, ns, key, value) {
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
        silent: false
      };
      var keySeparator = this.options.keySeparator;
      if (keySeparator === undefined) keySeparator = '.';
      var path = [lng, ns];
      if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);

      if (lng.indexOf('.') > -1) {
        path = lng.split('.');
        value = ns;
        ns = path[1];
      }

      this.addNamespaces(ns);
      setPath(this.data, path, value);
      if (!options.silent) this.emit('added', lng, ns, key, value);
    }
  }, {
    key: "addResources",
    value: function addResources(lng, ns, resources) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
        silent: false
      };

      for (var m in resources) {
        if (typeof resources[m] === 'string' || Object.prototype.toString.apply(resources[m]) === '[object Array]') this.addResource(lng, ns, m, resources[m], {
          silent: true
        });
      }

      if (!options.silent) this.emit('added', lng, ns, resources);
    }
  }, {
    key: "addResourceBundle",
    value: function addResourceBundle(lng, ns, resources, deep, overwrite) {
      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {
        silent: false
      };
      var path = [lng, ns];

      if (lng.indexOf('.') > -1) {
        path = lng.split('.');
        deep = resources;
        resources = ns;
        ns = path[1];
      }

      this.addNamespaces(ns);
      var pack = getPath(this.data, path) || {};

      if (deep) {
        deepExtend(pack, resources, overwrite);
      } else {
        pack = _objectSpread({}, pack, resources);
      }

      setPath(this.data, path, pack);
      if (!options.silent) this.emit('added', lng, ns, resources);
    }
  }, {
    key: "removeResourceBundle",
    value: function removeResourceBundle(lng, ns) {
      if (this.hasResourceBundle(lng, ns)) {
        delete this.data[lng][ns];
      }

      this.removeNamespaces(ns);
      this.emit('removed', lng, ns);
    }
  }, {
    key: "hasResourceBundle",
    value: function hasResourceBundle(lng, ns) {
      return this.getResource(lng, ns) !== undefined;
    }
  }, {
    key: "getResourceBundle",
    value: function getResourceBundle(lng, ns) {
      if (!ns) ns = this.options.defaultNS;
      if (this.options.compatibilityAPI === 'v1') return _objectSpread({}, {}, this.getResource(lng, ns));
      return this.getResource(lng, ns);
    }
  }, {
    key: "getDataByLanguage",
    value: function getDataByLanguage(lng) {
      return this.data[lng];
    }
  }, {
    key: "hasLanguageSomeTranslations",
    value: function hasLanguageSomeTranslations(lng) {
      var data = this.getDataByLanguage(lng);
      var n = data && Object.keys(data) || [];
      return !!n.find(function (v) {
        return data[v] && Object.keys(data[v]).length > 0;
      });
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.data;
    }
  }]);

  return ResourceStore;
}(EventEmitter);

var postProcessor = {
  processors: {},
  addPostProcessor: function addPostProcessor(module) {
    this.processors[module.name] = module;
  },
  handle: function handle(processors, value, key, options, translator) {
    var _this = this;

    processors.forEach(function (processor) {
      if (_this.processors[processor]) value = _this.processors[processor].process(value, key, options, translator);
    });
    return value;
  }
};

var checkedLoadedFor = {};

var Translator = function (_EventEmitter) {
  _inherits(Translator, _EventEmitter);

  function Translator(services) {
    var _this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Translator);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Translator).call(this));

    if (isIE10) {
      EventEmitter.call(_assertThisInitialized(_this));
    }

    copy(['resourceStore', 'languageUtils', 'pluralResolver', 'interpolator', 'backendConnector', 'i18nFormat', 'utils'], services, _assertThisInitialized(_this));
    _this.options = options;

    if (_this.options.keySeparator === undefined) {
      _this.options.keySeparator = '.';
    }

    _this.logger = baseLogger.create('translator');
    return _this;
  }

  _createClass(Translator, [{
    key: "changeLanguage",
    value: function changeLanguage(lng) {
      if (lng) this.language = lng;
    }
  }, {
    key: "exists",
    value: function exists(key) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        interpolation: {}
      };

      if (key === undefined || key === null) {
        return false;
      }

      var resolved = this.resolve(key, options);
      return resolved && resolved.res !== undefined;
    }
  }, {
    key: "extractFromKey",
    value: function extractFromKey(key, options) {
      var nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;
      if (nsSeparator === undefined) nsSeparator = ':';
      var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
      var namespaces = options.ns || this.options.defaultNS;
      var wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
      var seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);

      if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
        var m = key.match(this.interpolator.nestingRegexp);

        if (m && m.length > 0) {
          return {
            key: key,
            namespaces: namespaces
          };
        }

        var parts = key.split(nsSeparator);
        if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
        key = parts.join(keySeparator);
      }

      if (typeof namespaces === 'string') namespaces = [namespaces];
      return {
        key: key,
        namespaces: namespaces
      };
    }
  }, {
    key: "translate",
    value: function translate(keys, options, lastKey) {
      var _this2 = this;

      if (_typeof$1(options) !== 'object' && this.options.overloadTranslationOptionHandler) {
        options = this.options.overloadTranslationOptionHandler(arguments);
      }

      if (!options) options = {};
      if (keys === undefined || keys === null) return '';
      if (!Array.isArray(keys)) keys = [String(keys)];
      var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;

      var _this$extractFromKey = this.extractFromKey(keys[keys.length - 1], options),
          key = _this$extractFromKey.key,
          namespaces = _this$extractFromKey.namespaces;

      var namespace = namespaces[namespaces.length - 1];
      var lng = options.lng || this.language;
      var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;

      if (lng && lng.toLowerCase() === 'cimode') {
        if (appendNamespaceToCIMode) {
          var nsSeparator = options.nsSeparator || this.options.nsSeparator;
          return namespace + nsSeparator + key;
        }

        return key;
      }

      var resolved = this.resolve(keys, options);
      var res = resolved && resolved.res;
      var resUsedKey = resolved && resolved.usedKey || key;
      var resExactUsedKey = resolved && resolved.exactUsedKey || key;
      var resType = Object.prototype.toString.apply(res);
      var noObject = ['[object Number]', '[object Function]', '[object RegExp]'];
      var joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;
      var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
      var handleAsObject = typeof res !== 'string' && typeof res !== 'boolean' && typeof res !== 'number';

      if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === 'string' && resType === '[object Array]')) {
        if (!options.returnObjects && !this.options.returnObjects) {
          if (!this.options.returnedObjectHandler) {
            this.logger.warn('accessing an object - but returnObjects options is not enabled!');
          }

          return this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, _objectSpread({}, options, {
            ns: namespaces
          })) : "key '".concat(key, " (").concat(this.language, ")' returned an object instead of string.");
        }

        if (keySeparator) {
          var resTypeIsArray = resType === '[object Array]';
          var copy = resTypeIsArray ? [] : {};
          var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;

          for (var m in res) {
            if (Object.prototype.hasOwnProperty.call(res, m)) {
              var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m);
              copy[m] = this.translate(deepKey, _objectSpread({}, options, {
                joinArrays: false,
                ns: namespaces
              }));
              if (copy[m] === deepKey) copy[m] = res[m];
            }
          }

          res = copy;
        }
      } else if (handleAsObjectInI18nFormat && typeof joinArrays === 'string' && resType === '[object Array]') {
        res = res.join(joinArrays);
        if (res) res = this.extendTranslation(res, keys, options, lastKey);
      } else {
        var usedDefault = false;
        var usedKey = false;
        var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
        var hasDefaultValue = Translator.hasDefaultValue(options);
        var defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : '';
        var defaultValue = options["defaultValue".concat(defaultValueSuffix)] || options.defaultValue;

        if (!this.isValidLookup(res) && hasDefaultValue) {
          usedDefault = true;
          res = defaultValue;
        }

        if (!this.isValidLookup(res)) {
          usedKey = true;
          res = key;
        }

        var missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
        var resForMissing = missingKeyNoValueFallbackToKey && usedKey ? undefined : res;
        var updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;

        if (usedKey || usedDefault || updateMissing) {
          this.logger.log(updateMissing ? 'updateKey' : 'missingKey', lng, namespace, key, updateMissing ? defaultValue : res);

          if (keySeparator) {
            var fk = this.resolve(key, _objectSpread({}, options, {
              keySeparator: false
            }));
            if (fk && fk.res) this.logger.warn('Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.');
          }

          var lngs = [];
          var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);

          if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {
            for (var i = 0; i < fallbackLngs.length; i++) {
              lngs.push(fallbackLngs[i]);
            }
          } else if (this.options.saveMissingTo === 'all') {
            lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
          } else {
            lngs.push(options.lng || this.language);
          }

          var send = function send(l, k, fallbackValue) {
            if (_this2.options.missingKeyHandler) {
              _this2.options.missingKeyHandler(l, namespace, k, updateMissing ? fallbackValue : resForMissing, updateMissing, options);
            } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
              _this2.backendConnector.saveMissing(l, namespace, k, updateMissing ? fallbackValue : resForMissing, updateMissing, options);
            }

            _this2.emit('missingKey', l, namespace, k, res);
          };

          if (this.options.saveMissing) {
            if (this.options.saveMissingPlurals && needsPluralHandling) {
              lngs.forEach(function (language) {
                _this2.pluralResolver.getSuffixes(language).forEach(function (suffix) {
                  send([language], key + suffix, options["defaultValue".concat(suffix)] || defaultValue);
                });
              });
            } else {
              send(lngs, key, defaultValue);
            }
          }
        }

        res = this.extendTranslation(res, keys, options, resolved, lastKey);
        if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = "".concat(namespace, ":").concat(key);
        if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) res = this.options.parseMissingKeyHandler(res);
      }

      return res;
    }
  }, {
    key: "extendTranslation",
    value: function extendTranslation(res, key, options, resolved, lastKey) {
      var _this3 = this;

      if (this.i18nFormat && this.i18nFormat.parse) {
        res = this.i18nFormat.parse(res, options, resolved.usedLng, resolved.usedNS, resolved.usedKey, {
          resolved: resolved
        });
      } else if (!options.skipInterpolation) {
        if (options.interpolation) this.interpolator.init(_objectSpread({}, options, {
          interpolation: _objectSpread({}, this.options.interpolation, options.interpolation)
        }));
        var skipOnVariables = options.interpolation && options.interpolation.skipOnVariables || this.options.interpolation.skipOnVariables;
        var nestBef;

        if (skipOnVariables) {
          var nb = res.match(this.interpolator.nestingRegexp);
          nestBef = nb && nb.length;
        }

        var data = options.replace && typeof options.replace !== 'string' ? options.replace : options;
        if (this.options.interpolation.defaultVariables) data = _objectSpread({}, this.options.interpolation.defaultVariables, data);
        res = this.interpolator.interpolate(res, data, options.lng || this.language, options);

        if (skipOnVariables) {
          var na = res.match(this.interpolator.nestingRegexp);
          var nestAft = na && na.length;
          if (nestBef < nestAft) options.nest = false;
        }

        if (options.nest !== false) res = this.interpolator.nest(res, function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          if (lastKey && lastKey[0] === args[0] && !options.context) {
            _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key[0]));

            return null;
          }

          return _this3.translate.apply(_this3, args.concat([key]));
        }, options);
        if (options.interpolation) this.interpolator.reset();
      }

      var postProcess = options.postProcess || this.options.postProcess;
      var postProcessorNames = typeof postProcess === 'string' ? [postProcess] : postProcess;

      if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
        res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? _objectSpread({
          i18nResolved: resolved
        }, options) : options, this);
      }

      return res;
    }
  }, {
    key: "resolve",
    value: function resolve(keys) {
      var _this4 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var found;
      var usedKey;
      var exactUsedKey;
      var usedLng;
      var usedNS;
      if (typeof keys === 'string') keys = [keys];
      keys.forEach(function (k) {
        if (_this4.isValidLookup(found)) return;

        var extracted = _this4.extractFromKey(k, options);

        var key = extracted.key;
        usedKey = key;
        var namespaces = extracted.namespaces;
        if (_this4.options.fallbackNS) namespaces = namespaces.concat(_this4.options.fallbackNS);
        var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
        var needsContextHandling = options.context !== undefined && (typeof options.context === 'string' || typeof options.context === 'number') && options.context !== '';
        var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);
        namespaces.forEach(function (ns) {
          if (_this4.isValidLookup(found)) return;
          usedNS = ns;

          if (!checkedLoadedFor["".concat(codes[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
            checkedLoadedFor["".concat(codes[0], "-").concat(ns)] = true;

            _this4.logger.warn("key \"".concat(usedKey, "\" for languages \"").concat(codes.join(', '), "\" won't get resolved as namespace \"").concat(usedNS, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
          }

          codes.forEach(function (code) {
            if (_this4.isValidLookup(found)) return;
            usedLng = code;
            var finalKey = key;
            var finalKeys = [finalKey];

            if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
              _this4.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
            } else {
              var pluralSuffix;
              if (needsPluralHandling) pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count, options);
              if (needsPluralHandling && needsContextHandling) finalKeys.push(finalKey + pluralSuffix);
              if (needsContextHandling) finalKeys.push(finalKey += "".concat(_this4.options.contextSeparator).concat(options.context));
              if (needsPluralHandling) finalKeys.push(finalKey += pluralSuffix);
            }

            var possibleKey;

            while (possibleKey = finalKeys.pop()) {
              if (!_this4.isValidLookup(found)) {
                exactUsedKey = possibleKey;
                found = _this4.getResource(code, ns, possibleKey, options);
              }
            }
          });
        });
      });
      return {
        res: found,
        usedKey: usedKey,
        exactUsedKey: exactUsedKey,
        usedLng: usedLng,
        usedNS: usedNS
      };
    }
  }, {
    key: "isValidLookup",
    value: function isValidLookup(res) {
      return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');
    }
  }, {
    key: "getResource",
    value: function getResource(code, ns, key) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);
      return this.resourceStore.getResource(code, ns, key, options);
    }
  }], [{
    key: "hasDefaultValue",
    value: function hasDefaultValue(options) {
      var prefix = 'defaultValue';

      for (var option in options) {
        if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && undefined !== options[option]) {
          return true;
        }
      }

      return false;
    }
  }]);

  return Translator;
}(EventEmitter);

function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

var LanguageUtil = function () {
  function LanguageUtil(options) {
    _classCallCheck(this, LanguageUtil);

    this.options = options;
    this.supportedLngs = this.options.supportedLngs || false;
    this.logger = baseLogger.create('languageUtils');
  }

  _createClass(LanguageUtil, [{
    key: "getScriptPartFromCode",
    value: function getScriptPartFromCode(code) {
      if (!code || code.indexOf('-') < 0) return null;
      var p = code.split('-');
      if (p.length === 2) return null;
      p.pop();
      if (p[p.length - 1].toLowerCase() === 'x') return null;
      return this.formatLanguageCode(p.join('-'));
    }
  }, {
    key: "getLanguagePartFromCode",
    value: function getLanguagePartFromCode(code) {
      if (!code || code.indexOf('-') < 0) return code;
      var p = code.split('-');
      return this.formatLanguageCode(p[0]);
    }
  }, {
    key: "formatLanguageCode",
    value: function formatLanguageCode(code) {
      if (typeof code === 'string' && code.indexOf('-') > -1) {
        var specialCases = ['hans', 'hant', 'latn', 'cyrl', 'cans', 'mong', 'arab'];
        var p = code.split('-');

        if (this.options.lowerCaseLng) {
          p = p.map(function (part) {
            return part.toLowerCase();
          });
        } else if (p.length === 2) {
          p[0] = p[0].toLowerCase();
          p[1] = p[1].toUpperCase();
          if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
        } else if (p.length === 3) {
          p[0] = p[0].toLowerCase();
          if (p[1].length === 2) p[1] = p[1].toUpperCase();
          if (p[0] !== 'sgn' && p[2].length === 2) p[2] = p[2].toUpperCase();
          if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
          if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
        }

        return p.join('-');
      }

      return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
    }
  }, {
    key: "isSupportedCode",
    value: function isSupportedCode(code) {
      if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) {
        code = this.getLanguagePartFromCode(code);
      }

      return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
    }
  }, {
    key: "getBestMatchFromCodes",
    value: function getBestMatchFromCodes(codes) {
      var _this = this;

      if (!codes) return null;
      var found;
      codes.forEach(function (code) {
        if (found) return;

        var cleanedLng = _this.formatLanguageCode(code);

        if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng)) found = cleanedLng;
      });

      if (!found && this.options.supportedLngs) {
        codes.forEach(function (code) {
          if (found) return;

          var lngOnly = _this.getLanguagePartFromCode(code);

          if (_this.isSupportedCode(lngOnly)) return found = lngOnly;
          found = _this.options.supportedLngs.find(function (supportedLng) {
            if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;
          });
        });
      }

      if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
      return found;
    }
  }, {
    key: "getFallbackCodes",
    value: function getFallbackCodes(fallbacks, code) {
      if (!fallbacks) return [];
      if (typeof fallbacks === 'function') fallbacks = fallbacks(code);
      if (typeof fallbacks === 'string') fallbacks = [fallbacks];
      if (Object.prototype.toString.apply(fallbacks) === '[object Array]') return fallbacks;
      if (!code) return fallbacks["default"] || [];
      var found = fallbacks[code];
      if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
      if (!found) found = fallbacks[this.formatLanguageCode(code)];
      if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
      if (!found) found = fallbacks["default"];
      return found || [];
    }
  }, {
    key: "toResolveHierarchy",
    value: function toResolveHierarchy(code, fallbackCode) {
      var _this2 = this;

      var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
      var codes = [];

      var addCode = function addCode(c) {
        if (!c) return;

        if (_this2.isSupportedCode(c)) {
          codes.push(c);
        } else {
          _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c));
        }
      };

      if (typeof code === 'string' && code.indexOf('-') > -1) {
        if (this.options.load !== 'languageOnly') addCode(this.formatLanguageCode(code));
        if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly') addCode(this.getScriptPartFromCode(code));
        if (this.options.load !== 'currentOnly') addCode(this.getLanguagePartFromCode(code));
      } else if (typeof code === 'string') {
        addCode(this.formatLanguageCode(code));
      }

      fallbackCodes.forEach(function (fc) {
        if (codes.indexOf(fc) < 0) addCode(_this2.formatLanguageCode(fc));
      });
      return codes;
    }
  }]);

  return LanguageUtil;
}();

var sets = [{
  lngs: ['ach', 'ak', 'am', 'arn', 'br', 'fil', 'gun', 'ln', 'mfe', 'mg', 'mi', 'oc', 'pt', 'pt-BR', 'tg', 'tl', 'ti', 'tr', 'uz', 'wa'],
  nr: [1, 2],
  fc: 1
}, {
  lngs: ['af', 'an', 'ast', 'az', 'bg', 'bn', 'ca', 'da', 'de', 'dev', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fi', 'fo', 'fur', 'fy', 'gl', 'gu', 'ha', 'hi', 'hu', 'hy', 'ia', 'it', 'kk', 'kn', 'ku', 'lb', 'mai', 'ml', 'mn', 'mr', 'nah', 'nap', 'nb', 'ne', 'nl', 'nn', 'no', 'nso', 'pa', 'pap', 'pms', 'ps', 'pt-PT', 'rm', 'sco', 'se', 'si', 'so', 'son', 'sq', 'sv', 'sw', 'ta', 'te', 'tk', 'ur', 'yo'],
  nr: [1, 2],
  fc: 2
}, {
  lngs: ['ay', 'bo', 'cgg', 'fa', 'ht', 'id', 'ja', 'jbo', 'ka', 'km', 'ko', 'ky', 'lo', 'ms', 'sah', 'su', 'th', 'tt', 'ug', 'vi', 'wo', 'zh'],
  nr: [1],
  fc: 3
}, {
  lngs: ['be', 'bs', 'cnr', 'dz', 'hr', 'ru', 'sr', 'uk'],
  nr: [1, 2, 5],
  fc: 4
}, {
  lngs: ['ar'],
  nr: [0, 1, 2, 3, 11, 100],
  fc: 5
}, {
  lngs: ['cs', 'sk'],
  nr: [1, 2, 5],
  fc: 6
}, {
  lngs: ['csb', 'pl'],
  nr: [1, 2, 5],
  fc: 7
}, {
  lngs: ['cy'],
  nr: [1, 2, 3, 8],
  fc: 8
}, {
  lngs: ['fr'],
  nr: [1, 2],
  fc: 9
}, {
  lngs: ['ga'],
  nr: [1, 2, 3, 7, 11],
  fc: 10
}, {
  lngs: ['gd'],
  nr: [1, 2, 3, 20],
  fc: 11
}, {
  lngs: ['is'],
  nr: [1, 2],
  fc: 12
}, {
  lngs: ['jv'],
  nr: [0, 1],
  fc: 13
}, {
  lngs: ['kw'],
  nr: [1, 2, 3, 4],
  fc: 14
}, {
  lngs: ['lt'],
  nr: [1, 2, 10],
  fc: 15
}, {
  lngs: ['lv'],
  nr: [1, 2, 0],
  fc: 16
}, {
  lngs: ['mk'],
  nr: [1, 2],
  fc: 17
}, {
  lngs: ['mnk'],
  nr: [0, 1, 2],
  fc: 18
}, {
  lngs: ['mt'],
  nr: [1, 2, 11, 20],
  fc: 19
}, {
  lngs: ['or'],
  nr: [2, 1],
  fc: 2
}, {
  lngs: ['ro'],
  nr: [1, 2, 20],
  fc: 20
}, {
  lngs: ['sl'],
  nr: [5, 1, 2, 3],
  fc: 21
}, {
  lngs: ['he', 'iw'],
  nr: [1, 2, 20, 21],
  fc: 22
}];
var _rulesPluralsTypes = {
  1: function _(n) {
    return Number(n > 1);
  },
  2: function _(n) {
    return Number(n != 1);
  },
  3: function _(n) {
    return 0;
  },
  4: function _(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  5: function _(n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
  },
  6: function _(n) {
    return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
  },
  7: function _(n) {
    return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  8: function _(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
  },
  9: function _(n) {
    return Number(n >= 2);
  },
  10: function _(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
  },
  11: function _(n) {
    return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
  },
  12: function _(n) {
    return Number(n % 10 != 1 || n % 100 == 11);
  },
  13: function _(n) {
    return Number(n !== 0);
  },
  14: function _(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
  },
  15: function _(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  16: function _(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
  },
  17: function _(n) {
    return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
  },
  18: function _(n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
  },
  19: function _(n) {
    return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
  },
  20: function _(n) {
    return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
  },
  21: function _(n) {
    return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
  },
  22: function _(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
  }
};
var deprecatedJsonVersions = ['v1', 'v2', 'v3'];
var suffixesOrder = {
  zero: 0,
  one: 1,
  two: 2,
  few: 3,
  many: 4,
  other: 5
};

function createRules() {
  var rules = {};
  sets.forEach(function (set) {
    set.lngs.forEach(function (l) {
      rules[l] = {
        numbers: set.nr,
        plurals: _rulesPluralsTypes[set.fc]
      };
    });
  });
  return rules;
}

var PluralResolver = function () {
  function PluralResolver(languageUtils) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, PluralResolver);

    this.languageUtils = languageUtils;
    this.options = options;
    this.logger = baseLogger.create('pluralResolver');

    if ((!this.options.compatibilityJSON || this.options.compatibilityJSON === 'v4') && (typeof Intl === 'undefined' || !Intl.PluralRules)) {
      this.options.compatibilityJSON = 'v3';
      this.logger.error('Your environment seems not to be Inlt API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.');
    }

    this.rules = createRules();
  }

  _createClass(PluralResolver, [{
    key: "addRule",
    value: function addRule(lng, obj) {
      this.rules[lng] = obj;
    }
  }, {
    key: "getRule",
    value: function getRule(code) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (this.shouldUseIntlApi()) {
        try {
          return new Intl.PluralRules(code, {
            type: options.ordinal ? 'ordinal' : 'cardinal'
          });
        } catch (_unused) {
          return;
        }
      }

      return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
    }
  }, {
    key: "needsPlural",
    value: function needsPlural(code) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var rule = this.getRule(code, options);

      if (this.shouldUseIntlApi()) {
        return rule && rule.resolvedOptions().pluralCategories.length > 1;
      }

      return rule && rule.numbers.length > 1;
    }
  }, {
    key: "getPluralFormsOfKey",
    value: function getPluralFormsOfKey(code, key) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.getSuffixes(code, options).map(function (suffix) {
        return "".concat(key).concat(suffix);
      });
    }
  }, {
    key: "getSuffixes",
    value: function getSuffixes(code) {
      var _this = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var rule = this.getRule(code, options);

      if (!rule) {
        return [];
      }

      if (this.shouldUseIntlApi()) {
        return rule.resolvedOptions().pluralCategories.sort(function (pluralCategory1, pluralCategory2) {
          return suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2];
        }).map(function (pluralCategory) {
          return "".concat(_this.options.prepend).concat(pluralCategory);
        });
      }

      return rule.numbers.map(function (number) {
        return _this.getSuffix(code, number, options);
      });
    }
  }, {
    key: "getSuffix",
    value: function getSuffix(code, count) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var rule = this.getRule(code, options);

      if (rule) {
        if (this.shouldUseIntlApi()) {
          return "".concat(this.options.prepend).concat(rule.select(count));
        }

        return this.getSuffixRetroCompatible(rule, count);
      }

      this.logger.warn("no plural rule found for: ".concat(code));
      return '';
    }
  }, {
    key: "getSuffixRetroCompatible",
    value: function getSuffixRetroCompatible(rule, count) {
      var _this2 = this;

      var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
      var suffix = rule.numbers[idx];

      if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
        if (suffix === 2) {
          suffix = 'plural';
        } else if (suffix === 1) {
          suffix = '';
        }
      }

      var returnSuffix = function returnSuffix() {
        return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
      };

      if (this.options.compatibilityJSON === 'v1') {
        if (suffix === 1) return '';
        if (typeof suffix === 'number') return "_plural_".concat(suffix.toString());
        return returnSuffix();
      } else if (this.options.compatibilityJSON === 'v2') {
        return returnSuffix();
      } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
        return returnSuffix();
      }

      return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
    }
  }, {
    key: "shouldUseIntlApi",
    value: function shouldUseIntlApi() {
      return !deprecatedJsonVersions.includes(this.options.compatibilityJSON);
    }
  }]);

  return PluralResolver;
}();

var Interpolator = function () {
  function Interpolator() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Interpolator);

    this.logger = baseLogger.create('interpolator');
    this.options = options;

    this.format = options.interpolation && options.interpolation.format || function (value) {
      return value;
    };

    this.init(options);
  }

  _createClass(Interpolator, [{
    key: "init",
    value: function init() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (!options.interpolation) options.interpolation = {
        escapeValue: true
      };
      var iOpts = options.interpolation;
      this.escape = iOpts.escape !== undefined ? iOpts.escape : escape;
      this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;
      this.useRawValueToEscape = iOpts.useRawValueToEscape !== undefined ? iOpts.useRawValueToEscape : false;
      this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || '{{';
      this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || '}}';
      this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
      this.unescapePrefix = iOpts.unescapeSuffix ? '' : iOpts.unescapePrefix || '-';
      this.unescapeSuffix = this.unescapePrefix ? '' : iOpts.unescapeSuffix || '';
      this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape('$t(');
      this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(')');
      this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ',';
      this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000;
      this.alwaysFormat = iOpts.alwaysFormat !== undefined ? iOpts.alwaysFormat : false;
      this.resetRegExp();
    }
  }, {
    key: "reset",
    value: function reset() {
      if (this.options) this.init(this.options);
    }
  }, {
    key: "resetRegExp",
    value: function resetRegExp() {
      var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
      this.regexp = new RegExp(regexpStr, 'g');
      var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
      this.regexpUnescape = new RegExp(regexpUnescapeStr, 'g');
      var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
      this.nestingRegexp = new RegExp(nestingRegexpStr, 'g');
    }
  }, {
    key: "interpolate",
    value: function interpolate(str, data, lng, options) {
      var _this = this;

      var match;
      var value;
      var replaces;
      var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};

      function regexSafe(val) {
        return val.replace(/\$/g, '$$$$');
      }

      var handleFormat = function handleFormat(key) {
        if (key.indexOf(_this.formatSeparator) < 0) {
          var path = getPathWithDefaults(data, defaultData, key);
          return _this.alwaysFormat ? _this.format(path, undefined, lng, _objectSpread({}, options, data, {
            interpolationkey: key
          })) : path;
        }

        var p = key.split(_this.formatSeparator);
        var k = p.shift().trim();
        var f = p.join(_this.formatSeparator).trim();
        return _this.format(getPathWithDefaults(data, defaultData, k), f, lng, _objectSpread({}, options, data, {
          interpolationkey: k
        }));
      };

      this.resetRegExp();
      var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
      var skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables || this.options.interpolation.skipOnVariables;
      var todos = [{
        regex: this.regexpUnescape,
        safeValue: function safeValue(val) {
          return regexSafe(val);
        }
      }, {
        regex: this.regexp,
        safeValue: function safeValue(val) {
          return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);
        }
      }];
      todos.forEach(function (todo) {
        replaces = 0;

        while (match = todo.regex.exec(str)) {
          value = handleFormat(match[1].trim());

          if (value === undefined) {
            if (typeof missingInterpolationHandler === 'function') {
              var temp = missingInterpolationHandler(str, match, options);
              value = typeof temp === 'string' ? temp : '';
            } else if (skipOnVariables) {
              value = match[0];
              continue;
            } else {
              _this.logger.warn("missed to pass in variable ".concat(match[1], " for interpolating ").concat(str));

              value = '';
            }
          } else if (typeof value !== 'string' && !_this.useRawValueToEscape) {
            value = makeString(value);
          }

          var safeValue = todo.safeValue(value);
          str = str.replace(match[0], safeValue);

          if (skipOnVariables) {
            todo.regex.lastIndex += safeValue.length;
            todo.regex.lastIndex -= match[0].length;
          } else {
            todo.regex.lastIndex = 0;
          }

          replaces++;

          if (replaces >= _this.maxReplaces) {
            break;
          }
        }
      });
      return str;
    }
  }, {
    key: "nest",
    value: function nest(str, fc) {
      var _this2 = this;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var match;
      var value;

      var clonedOptions = _objectSpread({}, options);

      clonedOptions.applyPostProcessor = false;
      delete clonedOptions.defaultValue;

      function handleHasOptions(key, inheritedOptions) {
        var sep = this.nestingOptionsSeparator;
        if (key.indexOf(sep) < 0) return key;
        var c = key.split(new RegExp("".concat(sep, "[ ]*{")));
        var optionsString = "{".concat(c[1]);
        key = c[0];
        optionsString = this.interpolate(optionsString, clonedOptions);
        optionsString = optionsString.replace(/'/g, '"');

        try {
          clonedOptions = JSON.parse(optionsString);
          if (inheritedOptions) clonedOptions = _objectSpread({}, inheritedOptions, clonedOptions);
        } catch (e) {
          this.logger.warn("failed parsing options string in nesting for key ".concat(key), e);
          return "".concat(key).concat(sep).concat(optionsString);
        }

        delete clonedOptions.defaultValue;
        return key;
      }

      while (match = this.nestingRegexp.exec(str)) {
        var formatters = [];
        var doReduce = false;

        if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
          var r = match[1].split(this.formatSeparator).map(function (elem) {
            return elem.trim();
          });
          match[1] = r.shift();
          formatters = r;
          doReduce = true;
        }

        value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
        if (value && match[0] === str && typeof value !== 'string') return value;
        if (typeof value !== 'string') value = makeString(value);

        if (!value) {
          this.logger.warn("missed to resolve ".concat(match[1], " for nesting ").concat(str));
          value = '';
        }

        if (doReduce) {
          value = formatters.reduce(function (v, f) {
            return _this2.format(v, f, options.lng, _objectSpread({}, options, {
              interpolationkey: match[1].trim()
            }));
          }, value.trim());
        }

        str = str.replace(match[0], value);
        this.regexp.lastIndex = 0;
      }

      return str;
    }
  }]);

  return Interpolator;
}();

function remove(arr, what) {
  var found = arr.indexOf(what);

  while (found !== -1) {
    arr.splice(found, 1);
    found = arr.indexOf(what);
  }
}

var Connector = function (_EventEmitter) {
  _inherits(Connector, _EventEmitter);

  function Connector(backend, store, services) {
    var _this;

    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    _classCallCheck(this, Connector);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Connector).call(this));

    if (isIE10) {
      EventEmitter.call(_assertThisInitialized(_this));
    }

    _this.backend = backend;
    _this.store = store;
    _this.services = services;
    _this.languageUtils = services.languageUtils;
    _this.options = options;
    _this.logger = baseLogger.create('backendConnector');
    _this.state = {};
    _this.queue = [];

    if (_this.backend && _this.backend.init) {
      _this.backend.init(services, options.backend, options);
    }

    return _this;
  }

  _createClass(Connector, [{
    key: "queueLoad",
    value: function queueLoad(languages, namespaces, options, callback) {
      var _this2 = this;

      var toLoad = [];
      var pending = [];
      var toLoadLanguages = [];
      var toLoadNamespaces = [];
      languages.forEach(function (lng) {
        var hasAllNamespaces = true;
        namespaces.forEach(function (ns) {
          var name = "".concat(lng, "|").concat(ns);

          if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {
            _this2.state[name] = 2;
          } else if (_this2.state[name] < 0) ; else if (_this2.state[name] === 1) {
            if (pending.indexOf(name) < 0) pending.push(name);
          } else {
            _this2.state[name] = 1;
            hasAllNamespaces = false;
            if (pending.indexOf(name) < 0) pending.push(name);
            if (toLoad.indexOf(name) < 0) toLoad.push(name);
            if (toLoadNamespaces.indexOf(ns) < 0) toLoadNamespaces.push(ns);
          }
        });
        if (!hasAllNamespaces) toLoadLanguages.push(lng);
      });

      if (toLoad.length || pending.length) {
        this.queue.push({
          pending: pending,
          loaded: {},
          errors: [],
          callback: callback
        });
      }

      return {
        toLoad: toLoad,
        pending: pending,
        toLoadLanguages: toLoadLanguages,
        toLoadNamespaces: toLoadNamespaces
      };
    }
  }, {
    key: "loaded",
    value: function loaded(name, err, data) {
      var s = name.split('|');
      var lng = s[0];
      var ns = s[1];
      if (err) this.emit('failedLoading', lng, ns, err);

      if (data) {
        this.store.addResourceBundle(lng, ns, data);
      }

      this.state[name] = err ? -1 : 2;
      var loaded = {};
      this.queue.forEach(function (q) {
        pushPath(q.loaded, [lng], ns);
        remove(q.pending, name);
        if (err) q.errors.push(err);

        if (q.pending.length === 0 && !q.done) {
          Object.keys(q.loaded).forEach(function (l) {
            if (!loaded[l]) loaded[l] = [];

            if (q.loaded[l].length) {
              q.loaded[l].forEach(function (ns) {
                if (loaded[l].indexOf(ns) < 0) loaded[l].push(ns);
              });
            }
          });
          q.done = true;

          if (q.errors.length) {
            q.callback(q.errors);
          } else {
            q.callback();
          }
        }
      });
      this.emit('loaded', loaded);
      this.queue = this.queue.filter(function (q) {
        return !q.done;
      });
    }
  }, {
    key: "read",
    value: function read(lng, ns, fcName) {
      var _this3 = this;

      var tried = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 350;
      var callback = arguments.length > 5 ? arguments[5] : undefined;
      if (!lng.length) return callback(null, {});
      return this.backend[fcName](lng, ns, function (err, data) {
        if (err && data && tried < 5) {
          setTimeout(function () {
            _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);
          }, wait);
          return;
        }

        callback(err, data);
      });
    }
  }, {
    key: "prepareLoading",
    value: function prepareLoading(languages, namespaces) {
      var _this4 = this;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var callback = arguments.length > 3 ? arguments[3] : undefined;

      if (!this.backend) {
        this.logger.warn('No backend was added via i18next.use. Will not load resources.');
        return callback && callback();
      }

      if (typeof languages === 'string') languages = this.languageUtils.toResolveHierarchy(languages);
      if (typeof namespaces === 'string') namespaces = [namespaces];
      var toLoad = this.queueLoad(languages, namespaces, options, callback);

      if (!toLoad.toLoad.length) {
        if (!toLoad.pending.length) callback();
        return null;
      }

      toLoad.toLoad.forEach(function (name) {
        _this4.loadOne(name);
      });
    }
  }, {
    key: "load",
    value: function load(languages, namespaces, callback) {
      this.prepareLoading(languages, namespaces, {}, callback);
    }
  }, {
    key: "reload",
    value: function reload(languages, namespaces, callback) {
      this.prepareLoading(languages, namespaces, {
        reload: true
      }, callback);
    }
  }, {
    key: "loadOne",
    value: function loadOne(name) {
      var _this5 = this;

      var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var s = name.split('|');
      var lng = s[0];
      var ns = s[1];
      this.read(lng, ns, 'read', undefined, undefined, function (err, data) {
        if (err) _this5.logger.warn("".concat(prefix, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);
        if (!err && data) _this5.logger.log("".concat(prefix, "loaded namespace ").concat(ns, " for language ").concat(lng), data);

        _this5.loaded(name, err, data);
      });
    }
  }, {
    key: "saveMissing",
    value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};

      if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
        this.logger.warn("did not save key \"".concat(key, "\" as the namespace \"").concat(namespace, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
        return;
      }

      if (key === undefined || key === null || key === '') return;

      if (this.backend && this.backend.create) {
        this.backend.create(languages, namespace, key, fallbackValue, null, _objectSpread({}, options, {
          isUpdate: isUpdate
        }));
      }

      if (!languages || !languages[0]) return;
      this.store.addResource(languages[0], namespace, key, fallbackValue);
    }
  }]);

  return Connector;
}(EventEmitter);

function get() {
  return {
    debug: false,
    initImmediate: true,
    ns: ['translation'],
    defaultNS: ['translation'],
    fallbackLng: ['dev'],
    fallbackNS: false,
    supportedLngs: false,
    nonExplicitSupportedLngs: false,
    load: 'all',
    preload: false,
    simplifyPluralSuffix: true,
    keySeparator: '.',
    nsSeparator: ':',
    pluralSeparator: '_',
    contextSeparator: '_',
    partialBundledLanguages: false,
    saveMissing: false,
    updateMissing: false,
    saveMissingTo: 'fallback',
    saveMissingPlurals: true,
    missingKeyHandler: false,
    missingInterpolationHandler: false,
    postProcess: false,
    postProcessPassResolved: false,
    returnNull: true,
    returnEmptyString: true,
    returnObjects: false,
    joinArrays: false,
    returnedObjectHandler: false,
    parseMissingKeyHandler: false,
    appendNamespaceToMissingKey: false,
    appendNamespaceToCIMode: false,
    overloadTranslationOptionHandler: function handle(args) {
      var ret = {};
      if (_typeof$1(args[1]) === 'object') ret = args[1];
      if (typeof args[1] === 'string') ret.defaultValue = args[1];
      if (typeof args[2] === 'string') ret.tDescription = args[2];

      if (_typeof$1(args[2]) === 'object' || _typeof$1(args[3]) === 'object') {
        var options = args[3] || args[2];
        Object.keys(options).forEach(function (key) {
          ret[key] = options[key];
        });
      }

      return ret;
    },
    interpolation: {
      escapeValue: true,
      format: function format(value, _format, lng, options) {
        return value;
      },
      prefix: '{{',
      suffix: '}}',
      formatSeparator: ',',
      unescapePrefix: '-',
      nestingPrefix: '$t(',
      nestingSuffix: ')',
      nestingOptionsSeparator: ',',
      maxReplaces: 1000,
      skipOnVariables: true
    }
  };
}
function transformOptions(options) {
  if (typeof options.ns === 'string') options.ns = [options.ns];
  if (typeof options.fallbackLng === 'string') options.fallbackLng = [options.fallbackLng];
  if (typeof options.fallbackNS === 'string') options.fallbackNS = [options.fallbackNS];

  if (options.supportedLngs && options.supportedLngs.indexOf('cimode') < 0) {
    options.supportedLngs = options.supportedLngs.concat(['cimode']);
  }

  return options;
}

function noop() {}

var I18n = function (_EventEmitter) {
  _inherits(I18n, _EventEmitter);

  function I18n() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var callback = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, I18n);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(I18n).call(this));

    if (isIE10) {
      EventEmitter.call(_assertThisInitialized(_this));
    }

    _this.options = transformOptions(options);
    _this.services = {};
    _this.logger = baseLogger;
    _this.modules = {
      external: []
    };

    if (callback && !_this.isInitialized && !options.isClone) {
      if (!_this.options.initImmediate) {
        _this.init(options, callback);

        return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
      }

      setTimeout(function () {
        _this.init(options, callback);
      }, 0);
    }

    return _this;
  }

  _createClass(I18n, [{
    key: "init",
    value: function init() {
      var _this2 = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (typeof options === 'function') {
        callback = options;
        options = {};
      }

      if (!options.defaultNS && options.ns) {
        if (typeof options.ns === 'string') {
          options.defaultNS = options.ns;
        } else if (options.ns.indexOf('translation') < 0) {
          options.defaultNS = options.ns[0];
        }
      }

      this.options = _objectSpread({}, get(), this.options, transformOptions(options));

      if (options.keySeparator !== undefined) {
        this.options.userDefinedKeySeparator = options.keySeparator;
      }

      this.format = this.options.interpolation.format;
      if (!callback) callback = noop;

      function createClassOnDemand(ClassOrObject) {
        if (!ClassOrObject) return null;
        if (typeof ClassOrObject === 'function') return new ClassOrObject();
        return ClassOrObject;
      }

      if (!this.options.isClone) {
        if (this.modules.logger) {
          baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
        } else {
          baseLogger.init(null, this.options);
        }

        var lu = new LanguageUtil(this.options);
        this.store = new ResourceStore(this.options.resources, this.options);
        var s = this.services;
        s.logger = baseLogger;
        s.resourceStore = this.store;
        s.languageUtils = lu;
        s.pluralResolver = new PluralResolver(lu, {
          prepend: this.options.pluralSeparator,
          compatibilityJSON: this.options.compatibilityJSON,
          simplifyPluralSuffix: this.options.simplifyPluralSuffix
        });
        s.interpolator = new Interpolator(this.options);
        s.utils = {
          hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
        };
        s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
        s.backendConnector.on('*', function (event) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          _this2.emit.apply(_this2, [event].concat(args));
        });

        if (this.modules.languageDetector) {
          s.languageDetector = createClassOnDemand(this.modules.languageDetector);
          s.languageDetector.init(s, this.options.detection, this.options);
        }

        if (this.modules.i18nFormat) {
          s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
          if (s.i18nFormat.init) s.i18nFormat.init(this);
        }

        this.translator = new Translator(this.services, this.options);
        this.translator.on('*', function (event) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          _this2.emit.apply(_this2, [event].concat(args));
        });
        this.modules.external.forEach(function (m) {
          if (m.init) m.init(_this2);
        });
      }

      if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
        var codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
        if (codes.length > 0 && codes[0] !== 'dev') this.options.lng = codes[0];
      }

      if (!this.services.languageDetector && !this.options.lng) {
        this.logger.warn('init: no languageDetector is used and no lng is defined');
      }

      var storeApi = ['getResource', 'hasResourceBundle', 'getResourceBundle', 'getDataByLanguage'];
      storeApi.forEach(function (fcName) {
        _this2[fcName] = function () {
          var _this2$store;

          return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
        };
      });
      var storeApiChained = ['addResource', 'addResources', 'addResourceBundle', 'removeResourceBundle'];
      storeApiChained.forEach(function (fcName) {
        _this2[fcName] = function () {
          var _this2$store2;

          (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);

          return _this2;
        };
      });
      var deferred = defer();

      var load = function load() {
        var finish = function finish(err, t) {
          if (_this2.isInitialized && !_this2.initializedStoreOnce) _this2.logger.warn('init: i18next is already initialized. You should call init just once!');
          _this2.isInitialized = true;
          if (!_this2.options.isClone) _this2.logger.log('initialized', _this2.options);

          _this2.emit('initialized', _this2.options);

          deferred.resolve(t);
          callback(err, t);
        };

        if (_this2.languages && _this2.options.compatibilityAPI !== 'v1' && !_this2.isInitialized) return finish(null, _this2.t.bind(_this2));

        _this2.changeLanguage(_this2.options.lng, finish);
      };

      if (this.options.resources || !this.options.initImmediate) {
        load();
      } else {
        setTimeout(load, 0);
      }

      return deferred;
    }
  }, {
    key: "loadResources",
    value: function loadResources(language) {
      var _this3 = this;

      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
      var usedCallback = callback;
      var usedLng = typeof language === 'string' ? language : this.language;
      if (typeof language === 'function') usedCallback = language;

      if (!this.options.resources || this.options.partialBundledLanguages) {
        if (usedLng && usedLng.toLowerCase() === 'cimode') return usedCallback();
        var toLoad = [];

        var append = function append(lng) {
          if (!lng) return;

          var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);

          lngs.forEach(function (l) {
            if (toLoad.indexOf(l) < 0) toLoad.push(l);
          });
        };

        if (!usedLng) {
          var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
          fallbacks.forEach(function (l) {
            return append(l);
          });
        } else {
          append(usedLng);
        }

        if (this.options.preload) {
          this.options.preload.forEach(function (l) {
            return append(l);
          });
        }

        this.services.backendConnector.load(toLoad, this.options.ns, usedCallback);
      } else {
        usedCallback(null);
      }
    }
  }, {
    key: "reloadResources",
    value: function reloadResources(lngs, ns, callback) {
      var deferred = defer();
      if (!lngs) lngs = this.languages;
      if (!ns) ns = this.options.ns;
      if (!callback) callback = noop;
      this.services.backendConnector.reload(lngs, ns, function (err) {
        deferred.resolve();
        callback(err);
      });
      return deferred;
    }
  }, {
    key: "use",
    value: function use(module) {
      if (!module) throw new Error('You are passing an undefined module! Please check the object you are passing to i18next.use()');
      if (!module.type) throw new Error('You are passing a wrong module! Please check the object you are passing to i18next.use()');

      if (module.type === 'backend') {
        this.modules.backend = module;
      }

      if (module.type === 'logger' || module.log && module.warn && module.error) {
        this.modules.logger = module;
      }

      if (module.type === 'languageDetector') {
        this.modules.languageDetector = module;
      }

      if (module.type === 'i18nFormat') {
        this.modules.i18nFormat = module;
      }

      if (module.type === 'postProcessor') {
        postProcessor.addPostProcessor(module);
      }

      if (module.type === '3rdParty') {
        this.modules.external.push(module);
      }

      return this;
    }
  }, {
    key: "changeLanguage",
    value: function changeLanguage(lng, callback) {
      var _this4 = this;

      this.isLanguageChangingTo = lng;
      var deferred = defer();
      this.emit('languageChanging', lng);

      var setLngProps = function setLngProps(l) {
        _this4.language = l;
        _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
        _this4.resolvedLanguage = undefined;
        if (['cimode', 'dev'].indexOf(l) > -1) return;

        for (var li = 0; li < _this4.languages.length; li++) {
          var lngInLngs = _this4.languages[li];
          if (['cimode', 'dev'].indexOf(lngInLngs) > -1) continue;

          if (_this4.store.hasLanguageSomeTranslations(lngInLngs)) {
            _this4.resolvedLanguage = lngInLngs;
            break;
          }
        }
      };

      var done = function done(err, l) {
        if (l) {
          setLngProps(l);

          _this4.translator.changeLanguage(l);

          _this4.isLanguageChangingTo = undefined;

          _this4.emit('languageChanged', l);

          _this4.logger.log('languageChanged', l);
        } else {
          _this4.isLanguageChangingTo = undefined;
        }

        deferred.resolve(function () {
          return _this4.t.apply(_this4, arguments);
        });
        if (callback) callback(err, function () {
          return _this4.t.apply(_this4, arguments);
        });
      };

      var setLng = function setLng(lngs) {
        if (!lng && !lngs && _this4.services.languageDetector) lngs = [];
        var l = typeof lngs === 'string' ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);

        if (l) {
          if (!_this4.language) {
            setLngProps(l);
          }

          if (!_this4.translator.language) _this4.translator.changeLanguage(l);
          if (_this4.services.languageDetector) _this4.services.languageDetector.cacheUserLanguage(l);
        }

        _this4.loadResources(l, function (err) {
          done(err, l);
        });
      };

      if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
        setLng(this.services.languageDetector.detect());
      } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
        this.services.languageDetector.detect(setLng);
      } else {
        setLng(lng);
      }

      return deferred;
    }
  }, {
    key: "getFixedT",
    value: function getFixedT(lng, ns, keyPrefix) {
      var _this5 = this;

      var fixedT = function fixedT(key, opts) {
        var options;

        if (_typeof$1(opts) !== 'object') {
          for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
            rest[_key3 - 2] = arguments[_key3];
          }

          options = _this5.options.overloadTranslationOptionHandler([key, opts].concat(rest));
        } else {
          options = _objectSpread({}, opts);
        }

        options.lng = options.lng || fixedT.lng;
        options.lngs = options.lngs || fixedT.lngs;
        options.ns = options.ns || fixedT.ns;
        var keySeparator = _this5.options.keySeparator || '.';
        var resultKey = keyPrefix ? "".concat(keyPrefix).concat(keySeparator).concat(key) : key;
        return _this5.t(resultKey, options);
      };

      if (typeof lng === 'string') {
        fixedT.lng = lng;
      } else {
        fixedT.lngs = lng;
      }

      fixedT.ns = ns;
      fixedT.keyPrefix = keyPrefix;
      return fixedT;
    }
  }, {
    key: "t",
    value: function t() {
      var _this$translator;

      return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
    }
  }, {
    key: "exists",
    value: function exists() {
      var _this$translator2;

      return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
    }
  }, {
    key: "setDefaultNamespace",
    value: function setDefaultNamespace(ns) {
      this.options.defaultNS = ns;
    }
  }, {
    key: "hasLoadedNamespace",
    value: function hasLoadedNamespace(ns) {
      var _this6 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!this.isInitialized) {
        this.logger.warn('hasLoadedNamespace: i18next was not initialized', this.languages);
        return false;
      }

      if (!this.languages || !this.languages.length) {
        this.logger.warn('hasLoadedNamespace: i18n.languages were undefined or empty', this.languages);
        return false;
      }

      var lng = this.resolvedLanguage || this.languages[0];
      var fallbackLng = this.options ? this.options.fallbackLng : false;
      var lastLng = this.languages[this.languages.length - 1];
      if (lng.toLowerCase() === 'cimode') return true;

      var loadNotPending = function loadNotPending(l, n) {
        var loadState = _this6.services.backendConnector.state["".concat(l, "|").concat(n)];

        return loadState === -1 || loadState === 2;
      };

      if (options.precheck) {
        var preResult = options.precheck(this, loadNotPending);
        if (preResult !== undefined) return preResult;
      }

      if (this.hasResourceBundle(lng, ns)) return true;
      if (!this.services.backendConnector.backend) return true;
      if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
      return false;
    }
  }, {
    key: "loadNamespaces",
    value: function loadNamespaces(ns, callback) {
      var _this7 = this;

      var deferred = defer();

      if (!this.options.ns) {
        callback && callback();
        return Promise.resolve();
      }

      if (typeof ns === 'string') ns = [ns];
      ns.forEach(function (n) {
        if (_this7.options.ns.indexOf(n) < 0) _this7.options.ns.push(n);
      });
      this.loadResources(function (err) {
        deferred.resolve();
        if (callback) callback(err);
      });
      return deferred;
    }
  }, {
    key: "loadLanguages",
    value: function loadLanguages(lngs, callback) {
      var deferred = defer();
      if (typeof lngs === 'string') lngs = [lngs];
      var preloaded = this.options.preload || [];
      var newLngs = lngs.filter(function (lng) {
        return preloaded.indexOf(lng) < 0;
      });

      if (!newLngs.length) {
        if (callback) callback();
        return Promise.resolve();
      }

      this.options.preload = preloaded.concat(newLngs);
      this.loadResources(function (err) {
        deferred.resolve();
        if (callback) callback(err);
      });
      return deferred;
    }
  }, {
    key: "dir",
    value: function dir(lng) {
      if (!lng) lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
      if (!lng) return 'rtl';
      var rtlLngs = ['ar', 'shu', 'sqr', 'ssh', 'xaa', 'yhd', 'yud', 'aao', 'abh', 'abv', 'acm', 'acq', 'acw', 'acx', 'acy', 'adf', 'ads', 'aeb', 'aec', 'afb', 'ajp', 'apc', 'apd', 'arb', 'arq', 'ars', 'ary', 'arz', 'auz', 'avl', 'ayh', 'ayl', 'ayn', 'ayp', 'bbz', 'pga', 'he', 'iw', 'ps', 'pbt', 'pbu', 'pst', 'prp', 'prd', 'ug', 'ur', 'ydd', 'yds', 'yih', 'ji', 'yi', 'hbo', 'men', 'xmn', 'fa', 'jpr', 'peo', 'pes', 'prs', 'dv', 'sam', 'ckb'];
      return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) >= 0 ? 'rtl' : 'ltr';
    }
  }, {
    key: "createInstance",
    value: function createInstance() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;
      return new I18n(options, callback);
    }
  }, {
    key: "cloneInstance",
    value: function cloneInstance() {
      var _this8 = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;

      var mergedOptions = _objectSpread({}, this.options, options, {
        isClone: true
      });

      var clone = new I18n(mergedOptions);
      var membersToCopy = ['store', 'services', 'language'];
      membersToCopy.forEach(function (m) {
        clone[m] = _this8[m];
      });
      clone.services = _objectSpread({}, this.services);
      clone.services.utils = {
        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
      };
      clone.translator = new Translator(clone.services, clone.options);
      clone.translator.on('*', function (event) {
        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }

        clone.emit.apply(clone, [event].concat(args));
      });
      clone.init(mergedOptions, callback);
      clone.translator.options = clone.options;
      clone.translator.backendConnector.services.utils = {
        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
      };
      return clone;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        options: this.options,
        store: this.store,
        language: this.language,
        languages: this.languages,
        resolvedLanguage: this.resolvedLanguage
      };
    }
  }]);

  return I18n;
}(EventEmitter);

var i18next = new I18n();

const login_page$1 = {
	get_started: "Drucken mit ezeep Blue",
	login: "Anmelden",
	description: "Melde dich mit deinem ezeep Blue-Konto an, um zu drucken."
};
const printer_selection$1 = {
	loading: "Lade Drucker…",
	print: "Drucken",
	printer: "Drucker",
	print_in_progress: "Drucke…",
	color: "Farbe",
	orientation: "Ausrichtung",
	size: "Papierformat",
	duplex: "Duplex",
	quality: "Qualität",
	select_printer: "Wähle einen Drucker",
	select_color: "Wähle eine Farbe",
	select_size: "Wähle ein Papierformat",
	select_orientation: "Wähle eine Ausrichtung",
	color_color: "Farbe",
	color_grayscale: "Graustufen",
	orientation_portrait: "Hochformat",
	orientation_landscape: "Querformat"
};
const button_actions$1 = {
	login: "Anmelden",
	print: "Drucken",
	cancel: "Abbrechen"
};
const translationsDE = {
	login_page: login_page$1,
	printer_selection: printer_selection$1,
	button_actions: button_actions$1
};

const login_page = {
	get_started: "Print with ezeep Blue",
	login: "Sign in",
	description: "Sign in with your ezeep Blue account to print."
};
const printer_selection = {
	loading: "Loading printers…",
	print_in_progress: "Printing…",
	print: "Print",
	printer: "Printer",
	color: "Color",
	orientation: "Orientation",
	size: "Paper format",
	duplex: "Duplex",
	quality: "Quality",
	select_printer: "Select a printer",
	select_color: "Select a color",
	select_orientation: "Select an orientation",
	select_size: "Select a paper size",
	color_color: "Color",
	color_grayscale: "Grayscale",
	orientation_portrait: "Portrait",
	orientation_landscape: "Landscape"
};
const button_actions = {
	login: "Sign In",
	print: "Print",
	cancel: "Cancel"
};
const translationsEN = {
	login_page: login_page,
	printer_selection: printer_selection,
	button_actions: button_actions
};

function encodeFormData(data) {
  return Object.keys(data)
    .map((key) => encodeURIComponent(key) + '=' + encodeURIComponent(data[key]))
    .join('&');
}
function initi18n() {
  const resources = {
    en: {
      translation: translationsEN,
    },
    de: {
      translation: translationsDE,
    },
  };
  i18next.init({
    resources,
    lng: navigator.language,
    // allow keys to be phrases having `:`, `.`
    nsSeparator: false,
    fallbackLng: 'en',
  });
}
const poll = async ({ fn, validate, interval, maxAttempts }) => {
  let attempts = 0;
  const executePoll = async (resolve, reject) => {
    const result = await fn();
    attempts++;
    if (validate(result)) {
      return resolve(result);
    }
    else if (maxAttempts && attempts === maxAttempts) {
      return reject(new Error('Exceeded max attempts.'));
    }
    else {
      setTimeout(executePoll, interval, resolve, reject);
    }
  };
  return new Promise(executePoll);
};
const removeEmptyStrings = (obj) => {
  let newObj = {};
  Object.keys(obj).forEach((prop) => {
    if (obj[prop] !== '') {
      newObj[prop] = obj[prop];
    }
  });
  return newObj;
};

class EzpAuthorizationService {
  constructor(redirectURI, clientID) {
    this.urlParams = new URLSearchParams();
    this.isAuthorized = false;
    this.redirectURI = redirectURI;
    this.clientID = clientID;
    this.oauthUrl = authStore.state.authApiHostUrl;
    this.authURI = new URL(`https://${this.oauthUrl}/oauth/authorize/`);
    this.accessTokenURL = `https://${this.oauthUrl}/oauth/access_token/`;
  }
  generateCodeVerifier() {
    if (authStore.state.codeVerifier !== '') {
      this.codeVerifier = authStore.state.codeVerifier;
    }
    else {
      const arr = new Uint8Array(128);
      const randomValueArray = crypto.getRandomValues(arr);
      const codeVerifier = btoa(randomValueArray.toString()).substr(0, 128);
      this.codeVerifier = codeVerifier;
      authStore.state.codeVerifier = this.codeVerifier;
    }
  }
  async generateCodeChallenge(codeVerifier) {
    const encoder = new TextEncoder();
    const codeData = encoder.encode(codeVerifier);
    const digest = await crypto.subtle.digest('SHA-256', codeData);
    const base64Digest = btoa(String.fromCharCode.apply(null, new Uint8Array(digest)));
    this.codeChallenge = base64Digest.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
  }
  buildAuthURI() {
    this.urlParams.append('response_type', 'code');
    this.urlParams.append('client_id', this.clientID);
    this.urlParams.append('redirect_uri', this.redirectURI);
    this.urlParams.append('code_challenge', this.codeChallenge);
    this.urlParams.append('code_challenge_method', 'S256');
    this.authURI.search = this.urlParams.toString();
  }
  getAccessToken() {
    return fetch(this.accessTokenURL, {
      headers: {
        Authorization: 'Basic ' + btoa(this.clientID + ':'),
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      method: 'POST',
      body: encodeFormData({
        grant_type: 'authorization_code',
        scope: 'printing',
        code: this.code,
        redirect_uri: this.redirectURI,
        code_verifier: this.codeVerifier,
      }),
    })
      .then((response) => {
      return response.json(); // parse response
    })
      .then((data) => {
      // actual object
      if (data.access_token) {
        authStore.state.isAuthorized = true;
        this.isAuthorized = authStore.state.isAuthorized;
        localStorage.setItem('isAuthorized', this.isAuthorized.toString());
        this.accessToken = data.access_token;
        localStorage.setItem('access_token', this.accessToken);
        authStore.state.accessToken = this.accessToken;
        this.refreshToken = data.refresh_token;
        localStorage.setItem('refreshToken', this.refreshToken);
        authStore.state.refreshToken = this.refreshToken;
      }
    });
  }
  refreshTokens() {
    fetch(this.accessTokenURL, {
      headers: {
        Authorization: 'Basic ' + btoa(this.clientID + ':'),
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      method: 'POST',
      body: encodeFormData({
        grant_type: 'refresh_token',
        scope: 'printing',
        refresh_token: authStore.state.refreshToken,
      }),
    })
      .then((response) => response.json())
      .then((data) => {
      if (data.access_token) {
        this.accessToken = data.access_token;
        localStorage.setItem('access_token', this.accessToken);
        authStore.state.accessToken = this.accessToken;
        this.refreshToken = data.refresh_token;
        localStorage.setItem('refreshToken', this.refreshToken);
        authStore.state.refreshToken = this.refreshToken;
        authStore.state.isAuthorized = true;
      }
    });
  }
}
const authStore = createStore({
  codeVerifier: '',
  accessToken: '',
  refreshToken: '',
  isAuthorized: false,
  devApi: false,
  authApiHostUrl: '',
  redirectUri: '',
});
function sendCodeToParentWindow() {
  // get the URL parameters which will include the auth code
  const params = new URLSearchParams(window.location.search);
  const code = params.get('code');
  if (window.opener) {
    // send them to the opening window
    window.opener.postMessage(code, authStore.state.redirectUri);
    window.close();
  }
}

const ezpAuthCss = ":host{--dialog-radius:8px;--dialog-separator-position:0 0 0 var(--hairline-width-positive);-ms-flex-line-pack:center;align-content:center;background:var(--color-overlay);display:grid;grid-template:auto/280px;height:100%;-ms-flex-pack:center;justify-content:center;left:0;position:fixed;top:0;width:100%}@media (prefers-color-scheme: dark){:host{--dialog-separator-position:inset 0 0 0 var(--hairline-width-positive)}}#dialog{background:var(--color-surface-tertiary);border-radius:var(--dialog-radius);-webkit-box-shadow:var(--dialog-separator-position) var(--hairline-color), 0 var(--spacing-1) var(--spacing-2) 0 var(--color-shadow), 0 var(--spacing-2) var(--spacing-3) 0 var(--color-shadow), 0 var(--spacing-3) var(--spacing-4) 0 var(--color-shadow), 0 var(--spacing-4) var(--spacing-5) 0 var(--color-shadow), 0 var(--spacing-5) var(--spacing-6) 0 var(--color-shadow);box-shadow:var(--dialog-separator-position) var(--hairline-color), 0 var(--spacing-1) var(--spacing-2) 0 var(--color-shadow), 0 var(--spacing-2) var(--spacing-3) 0 var(--color-shadow), 0 var(--spacing-3) var(--spacing-4) 0 var(--color-shadow), 0 var(--spacing-4) var(--spacing-5) 0 var(--color-shadow), 0 var(--spacing-5) var(--spacing-6) 0 var(--color-shadow)}#header{display:grid;grid-template-columns:auto;-ms-flex-pack:end;justify-content:end;padding:var(--spacing-2)}#content{color:var(--color-foreground-primary);display:grid;grid-row-gap:var(--spacing-4);grid-template-rows:repeat(4, auto);-ms-flex-pack:center;justify-content:center;justify-items:center;padding:0 var(--spacing-4) var(--spacing-4);text-align:center}#icon{color:var(--color-main-primary)}#button{min-width:144px}";

const EzpAuth$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    attachShadow(this);
    this.authCancel = createEvent(this, "authCancel", 7);
    this.printShow = createEvent(this, "printShow", 7);
    this.windowObjectReference = null;
    this.previousUrl = null;
    this.handleCancel = () => {
      this.authCancel.emit();
    };
  }
  openSignInWindow(url, name) {
    // remove any existing event listeners
    window.removeEventListener('message', this.receiveMessage);
    // window features
    const strWindowFeatures = 'toolbar=no, menubar=no, width=600, height=7000, top=100, left=100';
    if (this.windowObjectReference === null || this.windowObjectReference.closed) {
      /* if the pointer to the window object in memory does not exist
      or if such pointer exists but the window was closed */
      this.windowObjectReference = window.open(url, name, strWindowFeatures);
    }
    else if (this.previousUrl !== this.auth.authURI.toString()) {
      /* if the resource to load is different,
      then we load it in the already opened secondary window and then
      we bring such window back on top/in front of its parent window. */
      this.windowObjectReference = window.open(url, name, strWindowFeatures);
      this.windowObjectReference.focus();
    }
    else {
      /* else the window reference must exist and the window
     is not closed; therefore, we can bring it back on top of any other
     window with the focus() method. There would be no need to re-create
     the window or to reload the referenced resource. */
      this.windowObjectReference.focus();
    }
    // check if the window was closed and cancel login accordingly
    if (this.hidelogin) {
      let checkClosedTimer = setInterval(() => {
        if (this.windowObjectReference.closed) {
          this.handleCancel();
          clearInterval(checkClosedTimer);
        }
      }, 500);
    }
    // add the listener for receiving a message from the popup
    window.addEventListener('message', (event) => this.receiveMessage(event), false);
    this.previousUrl = this.auth.authURI;
  }
  receiveMessage(event) {
    this.auth.code = event.data;
    this.auth.getAccessToken().finally(() => {
      this.authCancel.emit();
      this.printShow.emit();
    });
  }
  async componentWillLoad() {
    initi18n();
    this.auth = new EzpAuthorizationService(this.redirectURI, this.clientID);
    if (authStore.state.isAuthorized === false) {
      this.auth.generateCodeVerifier();
      await this.auth.generateCodeChallenge(authStore.state.codeVerifier);
      this.auth.buildAuthURI();
    }
    if (this.hidelogin) {
      this.openSignInWindow(this.auth.authURI.toString(), 'ezeep Login');
    }
  }
  render() {
    return this.hidelogin ? (h("ezp-progress", { status: i18next.t('login_page.login') })) : (h(Host, null, h("div", { id: "dialog" }, h("div", { id: "header" }, h("ezp-icon-button", { onClick: this.handleCancel, icon: "cross", level: "tertiary" })), h("div", { id: "content" }, h("ezp-icon", { id: "icon", name: "rocket", size: "large" }), h("ezp-label", { level: "primary", weight: "heavy", text: i18next.t('login_page.get_started') }), h("ezp-label", { text: i18next.t('login_page.description') }), h("ezp-text-button", { label: i18next.t('login_page.login'), id: "button", onClick: () => {
        this.openSignInWindow(this.auth.authURI.toString(), 'ezeep Login');
      } })))));
  }
  static get style() { return ezpAuthCss; }
};

const ezpBackdropCss = ":host{--host-animation-name:host-in;-webkit-animation:var(--host-animation-name) 0.3s forwards var(--easing-out-quart);animation:var(--host-animation-name) 0.3s forwards var(--easing-out-quart);background:var(--color-overlay);border-radius:8px;display:block;height:100%;left:0;opacity:0;position:absolute;top:0;width:100%;z-index:4}:host(.hide){--host-animation-name:host-out}@-webkit-keyframes host-in{0%{opacity:0}100%{opacity:1}}@keyframes host-in{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes host-out{0%{opacity:1}100%{opacity:0}}@keyframes host-out{0%{opacity:1}100%{opacity:0}}";

const EzpBackdrop$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    attachShadow(this);
    this.backdropHideStart = createEvent(this, "backdropHideStart", 7);
    this.backdropHideEnd = createEvent(this, "backdropHideEnd", 7);
    this.visible = true;
  }
  handleClick() {
    this.visible = false;
    this.backdropHideStart.emit();
  }
  listenAnimationEnd() {
    if (!this.visible) {
      this.backdropHideEnd.emit();
    }
  }
  render() {
    return h(Host, { class: { hide: !this.visible }, onClick: () => this.handleClick() });
  }
  get component() { return this; }
  static get style() { return ezpBackdropCss; }
};

const ezpIconCss = ":host{--glyph-size:auto;display:block}:host(.normal){--glyph-size:22px}:host(.large){--glyph-size:44px}#glyph{height:var(--glyph-size);width:var(--glyph-size)}svg{display:block;fill:currentColor;height:100%;width:100%}";

const EzpIcon$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    attachShadow(this);
    /** Description... */
    this.size = 'normal';
  }
  /**
   *
   * Lifecycle methods
   *
   */
  async componentWillLoad() {
    await fetch(getAssetPath(`./assets/glyph-${this.name}.svg`))
      .then((response) => response.text())
      .then((result) => {
      this.glyph = result;
    })
      .catch((error) => console.log(error));
  }
  /**
   *
   * Render method
   *
   */
  render() {
    return (h(Host, { class: this.size }, h("div", { id: "glyph", innerHTML: this.glyph })));
  }
  static get assetsDirs() { return ["assets"]; }
  static get style() { return ezpIconCss; }
};

const ezpIconButtonCss = ":host{--button-background-active:transparent;--button-background-disabled:transparent;--button-background-hover:transparent;--button-background-init:transparent;--button-background:var(--button-background-init);--button-color-disabled:inherit;--button-color-init:inherit;--button-color:var(--button-color-init);--button-cursor:pointer;--button-opacity-active:1;--button-opacity-hover:1;--button-opacity-init:1;--button-opacity:var(--button-opacity-init);--button-size:34px;display:block}:host(.primary){--button-background-active:var(--color-main-tertiary);--button-background-disabled:var(--color-shade-primary);--button-background-hover:var(--color-main-secondary);--button-background-init:var(--color-main-primary);--button-color-disabled:var(--color-foreground-tertiary);--button-color-init:var(--color-on-main-primary)}:host(.secondary){--button-background-active:var(--color-shade-tertiary);--button-background-disabled:var(--color-shade-primary);--button-background-hover:var(--color-shade-secondary);--button-background-init:var(--color-shade-primary);--button-color-disabled:var(--color-foreground-tertiary);--button-color-init:var(--color-main-primary)}:host(.tertiary){--button-background-active:var(--color-shade-secondary);--button-background-hover:var(--color-shade-primary);--button-color-disabled:var(--color-foreground-tertiary);--button-color-init:var(--color-main-primary)}:host(.quaternary){--button-color-disabled:var(--color-foreground-tertiary);--button-color-init:var(--color-main-primary);--button-opacity-active:0.42;--button-opacity-hover:0.68}#button{-ms-flex-align:center;align-items:center;-webkit-appearance:none;-moz-appearance:none;appearance:none;background:var(--button-background);border:0;border-radius:3px;-webkit-box-shadow:none;box-shadow:none;color:var(--button-color);cursor:var(--button-cursor);display:-ms-flexbox;display:flex;height:var(--button-size);-ms-flex-pack:center;justify-content:center;margin:0;opacity:var(--button-opacity);outline:none;width:var(--button-size)}@media (hover: hover){#button:not(:disabled):hover{--button-background:var(--button-background-hover);--button-opacity:var(--button-opacity-hover)}#button:not(:disabled):active{--button-background:var(--button-background-active);--button-opacity:var(--button-opacity-active)}}#button:disabled{--button-background:var(--button-background-disabled);--button-color:var(--button-color-disabled);--button-cursor:not-allowed}";

const EzpIconButton$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    attachShadow(this);
    /**
     *
     * Properties
     *
     */
    /** Description... */
    this.blank = false;
    /** Description... */
    this.disabled = false;
    /** Description... */
    this.level = 'primary';
  }
  /**
   *
   * Render method
   *
   */
  render() {
    const TagType = this.type !== undefined ? 'button' : 'a';
    const attributes = this.type !== undefined
      ? {
        type: this.type,
        disabled: this.disabled,
      }
      : {
        href: this.href,
        target: this.blank ? '_blank' : '_self',
      };
    return (h(Host, { class: `${this.level}` }, h(TagType, Object.assign({ id: "button" }, attributes), h("ezp-icon", { name: this.icon }))));
  }
  static get style() { return ezpIconButtonCss; }
};

const ezpLabelCss = ":host{display:block;min-width:var(--minWidth, auto);padding-bottom:1px;padding-top:1px}:host::before,:host::after{content:\"\";display:block;height:0}:host::before{margin-top:calc((var(--offset) + 1px) * -1)}:host::after{margin-bottom:calc((var(--offset) + 1px) * -1)}:host(.no-wrap){--whiteSpace:nowrap}:host(.ellipsis){--minWidth:0;--overflow:hidden;--textOverflow:ellipsis;--whiteSpace:nowrap;--width:100%}:host(.primary){--fontSize:18px;--lineHeight:24px;--letterSpacing:-0.0143006857em;--offset:5px}:host(.secondary){--fontSize:15px;--lineHeight:20px;--letterSpacing:-0.0087977569em;--offset:5px}:host(.tertiary){--fontSize:12px;--lineHeight:16px;--letterSpacing:0.0004907745em;--offset:4px}:host(.soft){--fontWeight:400}:host(.strong){--fontWeight:500}:host(.heavy){--fontWeight:600}#text{font-size:var(--fontSize);font-weight:var(--fontWeight);letter-spacing:var(--letterSpacing);line-height:var(--lineHeight);overflow:var(--overflow, visible);text-overflow:var(--textOverflow, clip);white-space:var(--whiteSpace, normal);width:var(--width, auto)}";

const EzpLabel$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    attachShadow(this);
    /**
     *
     * Properties
     *
     */
    /** Description... */
    this.ellipsis = false;
    /** Description... */
    this.level = 'secondary';
    /** Description... */
    this.noWrap = false;
    /** Description... */
    this.text = 'Label';
    /** Description... */
    this.weight = 'soft';
  }
  /**
   *
   * Render method
   *
   */
  render() {
    return (h(Host, { class: `${this.level} ${this.weight} ${this.ellipsis ? 'ellipsis' : ''} ${this.noWrap ? 'no-wrap' : ''}` }, h("div", { id: "text" }, this.text)));
  }
  static get style() { return ezpLabelCss; }
};

var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof self !== 'undefined' && self) ||
  (typeof global !== 'undefined' && global);

var support = {
  searchParams: 'URLSearchParams' in global,
  iterable: 'Symbol' in global && 'iterator' in Symbol,
  blob:
    'FileReader' in global &&
    'Blob' in global &&
    (function() {
      try {
        new Blob();
        return true
      } catch (e) {
        return false
      }
    })(),
  formData: 'FormData' in global,
  arrayBuffer: 'ArrayBuffer' in global
};

function isDataView(obj) {
  return obj && DataView.prototype.isPrototypeOf(obj)
}

if (support.arrayBuffer) {
  var viewClasses = [
    '[object Int8Array]',
    '[object Uint8Array]',
    '[object Uint8ClampedArray]',
    '[object Int16Array]',
    '[object Uint16Array]',
    '[object Int32Array]',
    '[object Uint32Array]',
    '[object Float32Array]',
    '[object Float64Array]'
  ];

  var isArrayBufferView =
    ArrayBuffer.isView ||
    function(obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
    };
}

function normalizeName(name) {
  if (typeof name !== 'string') {
    name = String(name);
  }
  if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
    throw new TypeError('Invalid character in header field name: "' + name + '"')
  }
  return name.toLowerCase()
}

function normalizeValue(value) {
  if (typeof value !== 'string') {
    value = String(value);
  }
  return value
}

// Build a destructive iterator for the value list
function iteratorFor(items) {
  var iterator = {
    next: function() {
      var value = items.shift();
      return {done: value === undefined, value: value}
    }
  };

  if (support.iterable) {
    iterator[Symbol.iterator] = function() {
      return iterator
    };
  }

  return iterator
}

function Headers(headers) {
  this.map = {};

  if (headers instanceof Headers) {
    headers.forEach(function(value, name) {
      this.append(name, value);
    }, this);
  } else if (Array.isArray(headers)) {
    headers.forEach(function(header) {
      this.append(header[0], header[1]);
    }, this);
  } else if (headers) {
    Object.getOwnPropertyNames(headers).forEach(function(name) {
      this.append(name, headers[name]);
    }, this);
  }
}

Headers.prototype.append = function(name, value) {
  name = normalizeName(name);
  value = normalizeValue(value);
  var oldValue = this.map[name];
  this.map[name] = oldValue ? oldValue + ', ' + value : value;
};

Headers.prototype['delete'] = function(name) {
  delete this.map[normalizeName(name)];
};

Headers.prototype.get = function(name) {
  name = normalizeName(name);
  return this.has(name) ? this.map[name] : null
};

Headers.prototype.has = function(name) {
  return this.map.hasOwnProperty(normalizeName(name))
};

Headers.prototype.set = function(name, value) {
  this.map[normalizeName(name)] = normalizeValue(value);
};

Headers.prototype.forEach = function(callback, thisArg) {
  for (var name in this.map) {
    if (this.map.hasOwnProperty(name)) {
      callback.call(thisArg, this.map[name], name, this);
    }
  }
};

Headers.prototype.keys = function() {
  var items = [];
  this.forEach(function(value, name) {
    items.push(name);
  });
  return iteratorFor(items)
};

Headers.prototype.values = function() {
  var items = [];
  this.forEach(function(value) {
    items.push(value);
  });
  return iteratorFor(items)
};

Headers.prototype.entries = function() {
  var items = [];
  this.forEach(function(value, name) {
    items.push([name, value]);
  });
  return iteratorFor(items)
};

if (support.iterable) {
  Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
}

function consumed(body) {
  if (body.bodyUsed) {
    return Promise.reject(new TypeError('Already read'))
  }
  body.bodyUsed = true;
}

function fileReaderReady(reader) {
  return new Promise(function(resolve, reject) {
    reader.onload = function() {
      resolve(reader.result);
    };
    reader.onerror = function() {
      reject(reader.error);
    };
  })
}

function readBlobAsArrayBuffer(blob) {
  var reader = new FileReader();
  var promise = fileReaderReady(reader);
  reader.readAsArrayBuffer(blob);
  return promise
}

function readBlobAsText(blob) {
  var reader = new FileReader();
  var promise = fileReaderReady(reader);
  reader.readAsText(blob);
  return promise
}

function readArrayBufferAsText(buf) {
  var view = new Uint8Array(buf);
  var chars = new Array(view.length);

  for (var i = 0; i < view.length; i++) {
    chars[i] = String.fromCharCode(view[i]);
  }
  return chars.join('')
}

function bufferClone(buf) {
  if (buf.slice) {
    return buf.slice(0)
  } else {
    var view = new Uint8Array(buf.byteLength);
    view.set(new Uint8Array(buf));
    return view.buffer
  }
}

function Body() {
  this.bodyUsed = false;

  this._initBody = function(body) {
    /*
      fetch-mock wraps the Response object in an ES6 Proxy to
      provide useful test harness features such as flush. However, on
      ES5 browsers without fetch or Proxy support pollyfills must be used;
      the proxy-pollyfill is unable to proxy an attribute unless it exists
      on the object before the Proxy is created. This change ensures
      Response.bodyUsed exists on the instance, while maintaining the
      semantic of setting Request.bodyUsed in the constructor before
      _initBody is called.
    */
    this.bodyUsed = this.bodyUsed;
    this._bodyInit = body;
    if (!body) {
      this._bodyText = '';
    } else if (typeof body === 'string') {
      this._bodyText = body;
    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
      this._bodyBlob = body;
    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
      this._bodyFormData = body;
    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
      this._bodyText = body.toString();
    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
      this._bodyArrayBuffer = bufferClone(body.buffer);
      // IE 10-11 can't handle a DataView body.
      this._bodyInit = new Blob([this._bodyArrayBuffer]);
    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
      this._bodyArrayBuffer = bufferClone(body);
    } else {
      this._bodyText = body = Object.prototype.toString.call(body);
    }

    if (!this.headers.get('content-type')) {
      if (typeof body === 'string') {
        this.headers.set('content-type', 'text/plain;charset=UTF-8');
      } else if (this._bodyBlob && this._bodyBlob.type) {
        this.headers.set('content-type', this._bodyBlob.type);
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
      }
    }
  };

  if (support.blob) {
    this.blob = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return Promise.resolve(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(new Blob([this._bodyArrayBuffer]))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as blob')
      } else {
        return Promise.resolve(new Blob([this._bodyText]))
      }
    };

    this.arrayBuffer = function() {
      if (this._bodyArrayBuffer) {
        var isConsumed = consumed(this);
        if (isConsumed) {
          return isConsumed
        }
        if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
          return Promise.resolve(
            this._bodyArrayBuffer.buffer.slice(
              this._bodyArrayBuffer.byteOffset,
              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
            )
          )
        } else {
          return Promise.resolve(this._bodyArrayBuffer)
        }
      } else {
        return this.blob().then(readBlobAsArrayBuffer)
      }
    };
  }

  this.text = function() {
    var rejected = consumed(this);
    if (rejected) {
      return rejected
    }

    if (this._bodyBlob) {
      return readBlobAsText(this._bodyBlob)
    } else if (this._bodyArrayBuffer) {
      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
    } else if (this._bodyFormData) {
      throw new Error('could not read FormData body as text')
    } else {
      return Promise.resolve(this._bodyText)
    }
  };

  if (support.formData) {
    this.formData = function() {
      return this.text().then(decode)
    };
  }

  this.json = function() {
    return this.text().then(JSON.parse)
  };

  return this
}

// HTTP methods whose capitalization should be normalized
var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

function normalizeMethod(method) {
  var upcased = method.toUpperCase();
  return methods.indexOf(upcased) > -1 ? upcased : method
}

function Request$1(input, options) {
  if (!(this instanceof Request$1)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
  }

  options = options || {};
  var body = options.body;

  if (input instanceof Request$1) {
    if (input.bodyUsed) {
      throw new TypeError('Already read')
    }
    this.url = input.url;
    this.credentials = input.credentials;
    if (!options.headers) {
      this.headers = new Headers(input.headers);
    }
    this.method = input.method;
    this.mode = input.mode;
    this.signal = input.signal;
    if (!body && input._bodyInit != null) {
      body = input._bodyInit;
      input.bodyUsed = true;
    }
  } else {
    this.url = String(input);
  }

  this.credentials = options.credentials || this.credentials || 'same-origin';
  if (options.headers || !this.headers) {
    this.headers = new Headers(options.headers);
  }
  this.method = normalizeMethod(options.method || this.method || 'GET');
  this.mode = options.mode || this.mode || null;
  this.signal = options.signal || this.signal;
  this.referrer = null;

  if ((this.method === 'GET' || this.method === 'HEAD') && body) {
    throw new TypeError('Body not allowed for GET or HEAD requests')
  }
  this._initBody(body);

  if (this.method === 'GET' || this.method === 'HEAD') {
    if (options.cache === 'no-store' || options.cache === 'no-cache') {
      // Search for a '_' parameter in the query string
      var reParamSearch = /([?&])_=[^&]*/;
      if (reParamSearch.test(this.url)) {
        // If it already exists then set the value with the current time
        this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
      } else {
        // Otherwise add a new '_' parameter to the end with the current time
        var reQueryString = /\?/;
        this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
      }
    }
  }
}

Request$1.prototype.clone = function() {
  return new Request$1(this, {body: this._bodyInit})
};

function decode(body) {
  var form = new FormData();
  body
    .trim()
    .split('&')
    .forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split('=');
        var name = split.shift().replace(/\+/g, ' ');
        var value = split.join('=').replace(/\+/g, ' ');
        form.append(decodeURIComponent(name), decodeURIComponent(value));
      }
    });
  return form
}

function parseHeaders(rawHeaders) {
  var headers = new Headers();
  // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
  // https://tools.ietf.org/html/rfc7230#section-3.2
  var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
  // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
  // https://github.com/github/fetch/issues/748
  // https://github.com/zloirock/core-js/issues/751
  preProcessedHeaders
    .split('\r')
    .map(function(header) {
      return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
    })
    .forEach(function(line) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
  return headers
}

Body.call(Request$1.prototype);

function Response(bodyInit, options) {
  if (!(this instanceof Response)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
  }
  if (!options) {
    options = {};
  }

  this.type = 'default';
  this.status = options.status === undefined ? 200 : options.status;
  this.ok = this.status >= 200 && this.status < 300;
  this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
  this.headers = new Headers(options.headers);
  this.url = options.url || '';
  this._initBody(bodyInit);
}

Body.call(Response.prototype);

Response.prototype.clone = function() {
  return new Response(this._bodyInit, {
    status: this.status,
    statusText: this.statusText,
    headers: new Headers(this.headers),
    url: this.url
  })
};

Response.error = function() {
  var response = new Response(null, {status: 0, statusText: ''});
  response.type = 'error';
  return response
};

var redirectStatuses = [301, 302, 303, 307, 308];

Response.redirect = function(url, status) {
  if (redirectStatuses.indexOf(status) === -1) {
    throw new RangeError('Invalid status code')
  }

  return new Response(null, {status: status, headers: {location: url}})
};

var DOMException = global.DOMException;
try {
  new DOMException();
} catch (err) {
  DOMException = function(message, name) {
    this.message = message;
    this.name = name;
    var error = Error(message);
    this.stack = error.stack;
  };
  DOMException.prototype = Object.create(Error.prototype);
  DOMException.prototype.constructor = DOMException;
}

function fetch$1(input, init) {
  return new Promise(function(resolve, reject) {
    var request = new Request$1(input, init);

    if (request.signal && request.signal.aborted) {
      return reject(new DOMException('Aborted', 'AbortError'))
    }

    var xhr = new XMLHttpRequest();

    function abortXhr() {
      xhr.abort();
    }

    xhr.onload = function() {
      var options = {
        status: xhr.status,
        statusText: xhr.statusText,
        headers: parseHeaders(xhr.getAllResponseHeaders() || '')
      };
      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
      var body = 'response' in xhr ? xhr.response : xhr.responseText;
      setTimeout(function() {
        resolve(new Response(body, options));
      }, 0);
    };

    xhr.onerror = function() {
      setTimeout(function() {
        reject(new TypeError('Network request failed'));
      }, 0);
    };

    xhr.ontimeout = function() {
      setTimeout(function() {
        reject(new TypeError('Network request failed'));
      }, 0);
    };

    xhr.onabort = function() {
      setTimeout(function() {
        reject(new DOMException('Aborted', 'AbortError'));
      }, 0);
    };

    function fixUrl(url) {
      try {
        return url === '' && global.location.href ? global.location.href : url
      } catch (e) {
        return url
      }
    }

    xhr.open(request.method, fixUrl(request.url), true);

    if (request.credentials === 'include') {
      xhr.withCredentials = true;
    } else if (request.credentials === 'omit') {
      xhr.withCredentials = false;
    }

    if ('responseType' in xhr) {
      if (support.blob) {
        xhr.responseType = 'blob';
      } else if (
        support.arrayBuffer &&
        request.headers.get('Content-Type') &&
        request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1
      ) {
        xhr.responseType = 'arraybuffer';
      }
    }

    if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {
      Object.getOwnPropertyNames(init.headers).forEach(function(name) {
        xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
      });
    } else {
      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value);
      });
    }

    if (request.signal) {
      request.signal.addEventListener('abort', abortXhr);

      xhr.onreadystatechange = function() {
        // DONE (success or failure)
        if (xhr.readyState === 4) {
          request.signal.removeEventListener('abort', abortXhr);
        }
      };
    }

    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
  })
}

fetch$1.polyfill = true;

if (!global.fetch) {
  global.fetch = fetch$1;
  global.Headers = Headers;
  global.Request = Request$1;
  global.Response = Response;
}

const fetch$2 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Headers: Headers,
  Request: Request$1,
  Response: Response,
  get DOMException () { return DOMException; },
  fetch: fetch$1
});

const require$$0 = /*@__PURE__*/getAugmentedNamespace(fetch$2);

var browser =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {
	
	var attach = __webpack_require__(1);
	var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
	
	module.exports = attach(ENVIRONMENT_IS_WORKER ? self : window);

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	/*
	* Configuration for React-Native's package system
	* @providesModule whatwg-fetch
	*/
	
	var interceptors = [];
	
	function interceptor(fetch) {
	  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }
	
	  var reversedInterceptors = interceptors.reduce(function (array, interceptor) {
	    return [interceptor].concat(array);
	  }, []);
	  var promise = Promise.resolve(args);
	
	  // Register request interceptors
	  reversedInterceptors.forEach(function (_ref) {
	    var request = _ref.request,
	        requestError = _ref.requestError;
	
	    if (request || requestError) {
	      promise = promise.then(function (args) {
	        return request.apply(undefined, _toConsumableArray(args));
	      }, requestError);
	    }
	  });
	
	  // Register fetch call
	  promise = promise.then(function (args) {
	    var request = new (Function.prototype.bind.apply(Request, [null].concat(_toConsumableArray(args))))();
	    return fetch(request).then(function (response) {
	      response.request = request;
	      return response;
	    }).catch(function (error) {
	      error.request = request;
	      return Promise.reject(error);
	    });
	  });
	
	  // Register response interceptors
	  reversedInterceptors.forEach(function (_ref2) {
	    var response = _ref2.response,
	        responseError = _ref2.responseError;
	
	    if (response || responseError) {
	      promise = promise.then(response, responseError);
	    }
	  });
	
	  return promise;
	}
	
	module.exports = function attach(env) {
	  // Make sure fetch is available in the given environment
	  if (!env.fetch) {
	    try {
	      __webpack_require__(2);
	    } catch (err) {
	      throw Error('No fetch available. Unable to register fetch-intercept');
	    }
	  }
	  env.fetch = function (fetch) {
	    return function () {
	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }
	
	      return interceptor.apply(undefined, [fetch].concat(args));
	    };
	  }(env.fetch);
	
	  return {
	    register: function register(interceptor) {
	      interceptors.push(interceptor);
	      return function () {
	        var index = interceptors.indexOf(interceptor);
	        if (index >= 0) {
	          interceptors.splice(index, 1);
	        }
	      };
	    },
	    clear: function clear() {
	      interceptors = [];
	    }
	  };
	};

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	module.exports = require$$0;

/***/ })
/******/ ]);

class EzpPrintService {
  constructor(redirectURI, clientID) {
    this.getPrintStatus = () => {
      return fetch(`https://${this.printingApi}/sfapi/Status/?id=${encodeURIComponent(printStore.state.jobID)}`, {
        headers: {
          Authorization: 'Bearer ' + authStore.state.accessToken,
        },
      }).then((response) => response.json());
    };
    this.redirectURI = redirectURI;
    this.clientID = clientID;
    this.printingApi = printStore.state.printApiHostUrl;
    this.checkStoredRefreshToken();
    this.registerFetchInterceptor();
  }
  checkStoredRefreshToken() {
    if (authStore.state.refreshToken !== '') {
      return;
    }
    if (localStorage.getItem('refreshToken') === null) {
      authStore.state.refreshToken = '';
    }
    else {
      authStore.state.refreshToken = localStorage.getItem('refreshToken');
    }
  }
  registerFetchInterceptor() {
    browser.register({
      request: (url, config) => {
        // Modify the url or config here
        return [url, config];
      },
      requestError: (error) => {
        // Called when an error occured during another 'request' interceptor call
        return Promise.reject(error);
      },
      // check for response status here
      response: (response) => {
        if (response.status === 401) {
          if (authStore.state.refreshToken === '') {
            return response;
          }
          const authService = new EzpAuthorizationService(this.redirectURI, this.clientID);
          authService.refreshTokens();
        }
        // Modify the reponse object
        return response;
      },
      responseError: (error) => {
        // Handle a fetch error
        return Promise.reject(error);
      },
    });
  }
  getPrinterList(accessToken) {
    return fetch(`https://${this.printingApi}/sfapi/GetPrinter/`, {
      method: 'GET',
      headers: {
        Authorization: 'Bearer ' + accessToken,
      },
    }).then((response) => response.json());
  }
  getConfig(accessToken) {
    return fetch(`https://${this.printingApi}/sfapi/GetConfiguration/`, {
      method: 'GET',
      headers: {
        Authorization: 'Bearer ' + accessToken,
      },
    }).then((response) => {
      if (response.ok) {
        authStore.state.isAuthorized = true;
      }
      if (!response.ok) {
        throw new Error('http status ' + response.status);
      }
      return response.json();
    });
  }
  getPrinterProperties(accessToken, printerID) {
    return fetch(`https://${this.printingApi}/sfapi/GetPrinterProperties/?id=${printerID}`, {
      method: 'GET',
      headers: {
        Authorization: 'Bearer ' + accessToken,
      },
    }).then((response) => {
      return response.json();
    });
  }
  getAllPrinterProperties(accessToken) {
    return fetch(`https://${this.printingApi}/sfapi/GetPrinterProperties/`, {
      method: 'GET',
      headers: {
        Authorization: 'Bearer ' + accessToken,
      },
    }).then((response) => {
      return response.json();
    });
  }
  printFileByUrl(accessToken, fileUrl, fileType, printerID, properties, filename, printAndDelete) {
    return fetch(`https://${this.printingApi}/sfapi/Print/`, {
      method: 'POST',
      headers: {
        Authorization: 'Bearer ' + accessToken,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(Object.assign(Object.assign(Object.assign({ fileurl: fileUrl, type: fileType, printerid: printerID }, (filename && { alias: filename })), (printAndDelete && { printanddelete: printAndDelete })), { properties })),
    }).then((response) => response.json());
  }
}
const printStore = createStore({
  printers: [],
  jobID: '',
  printFinished: false,
  printApiHostUrl: '',
});

class EzpUserService {
  getUserInfo() {
    return fetch(`https://${authStore.state.authApiHostUrl}/v1/users/me`, {
      headers: {
        Authorization: 'Bearer ' + authStore.state.accessToken,
        'Content-Type': 'application/json',
      },
      method: 'GET',
    }).then((response) => {
      return response.json();
    });
  }
}
const userStore = createStore({
  user: null,
});

const colors = [
	{
		id: 1,
		name: "Grayscale"
	},
	{
		id: 2,
		name: "Color"
	}
];
const orientations = [
	{
		id: 1,
		name: "Portrait"
	},
	{
		id: 2,
		name: "Landscape"
	}
];
const sizes = [
	{
		id: 1,
		name: "Auto",
		description: "Document size"
	},
	{
		id: 2,
		name: "Letter",
		description: "8.5 x 11 in"
	},
	{
		id: 3,
		name: "Ledger",
		description: "11 x 17 in"
	},
	{
		id: 4,
		name: "Legal",
		description: "8.5 x 14 in"
	},
	{
		id: 5,
		name: "Executive",
		description: "7.25 x 10.5 in"
	},
	{
		id: 6,
		name: "A3",
		description: "11.7 x 16.5 in"
	},
	{
		id: 7,
		name: "A4",
		description: "8.3 x 11.7 in"
	},
	{
		id: 8,
		name: "A5",
		description: "5.8 x 8.3 in"
	},
	{
		id: 9,
		name: "Folio",
		description: "8.5 x 13 in"
	},
	{
		id: 10,
		name: "Com-10",
		description: "4.125 x 9.5 in"
	}
];
const options = {
	colors: colors,
	orientations: orientations,
	sizes: sizes
};

const ezpPrinterSelectionCss = ":host{--content-separator:none;--dialog-radius:8px;--dialog-separator-position:0 0 0 var(--hairline-width-positive);--duration:0.3s;--footer-separator-position:0 var(--hairline-width-negative) 0 0;--header-separator-position:0 var(--hairline-width-positive) 0 0;-ms-flex-line-pack:center;align-content:center;background:var(--color-overlay);display:grid;grid-template:auto/320px;height:100vh;-ms-flex-pack:center;justify-content:center;left:0;position:fixed;top:0;width:100vw}@media (prefers-color-scheme: dark){:host{--content-separator:inset var(--hairline-width-positive) 0 0 0 var(--hairline-color),\n      inset var(--hairline-width-negative) 0 0 0 var(--hairline-color);--dialog-separator-position:inset 0 0 0 var(--hairline-width-positive);--footer-separator-position:inset 0 var(--hairline-width-positive) 0 0;--header-separator-position:inset 0 var(--hairline-width-negative) 0 0}}#container{background:var(--color-surface-tertiary);border-radius:var(--dialog-radius);-webkit-box-shadow:var(--dialog-separator-position) var(--hairline-color), 0 var(--spacing-1) var(--spacing-2) 0 var(--color-shadow), 0 var(--spacing-2) var(--spacing-3) 0 var(--color-shadow), 0 var(--spacing-3) var(--spacing-4) 0 var(--color-shadow), 0 var(--spacing-4) var(--spacing-5) 0 var(--color-shadow), 0 var(--spacing-5) var(--spacing-6) 0 var(--color-shadow);box-shadow:var(--dialog-separator-position) var(--hairline-color), 0 var(--spacing-1) var(--spacing-2) 0 var(--color-shadow), 0 var(--spacing-2) var(--spacing-3) 0 var(--color-shadow), 0 var(--spacing-3) var(--spacing-4) 0 var(--color-shadow), 0 var(--spacing-4) var(--spacing-5) 0 var(--color-shadow), 0 var(--spacing-5) var(--spacing-6) 0 var(--color-shadow);position:relative}#header{-webkit-box-shadow:var(--header-separator-position) var(--hairline-color);box-shadow:var(--header-separator-position) var(--hairline-color);color:var(--color-foreground-primary);display:grid;grid-column-gap:var(--spacing-2);grid-template-columns:auto 1fr auto;padding:var(--spacing-4);position:relative;z-index:3}#toggle-menu{margin:calc(var(--spacing-3) * -1) calc(var(--spacing-1) * -1) calc(var(--spacing-3) * -1) 0;position:relative;z-index:2}#content{background:var(--color-surface-secondary);-webkit-box-shadow:var(--content-separator);box-shadow:var(--content-separator);display:grid;grid-row-gap:var(--spacing-2);grid-template-rows:repeat(2, auto);padding:var(--spacing-2)}#footer{-webkit-box-shadow:var(--footer-separator-position) var(--hairline-color);box-shadow:var(--footer-separator-position) var(--hairline-color);display:grid;grid-column-gap:var(--spacing-2);grid-template-columns:repeat(2, 1fr);padding:var(--spacing-2);position:relative;z-index:3}";

const EzpPrinterSelection$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    attachShadow(this);
    this.printCancel = createEvent(this, "printCancel", 7);
    this.printSubmit = createEvent(this, "printSubmit", 7);
    this.duplexOptions = [
      {
        id: 1,
        title: 'None',
      },
      {
        id: 2,
        title: 'Long edge binding',
      },
      {
        id: 3,
        title: 'Short edge binding',
      },
    ];
    this.qualityOptions = [
      {
        id: 1,
        title: 'Draft',
      },
      {
        id: 2,
        title: 'Normal',
      },
      {
        id: 3,
        title: 'Best',
      },
    ];
    /**
     *
     * States
     *
     */
    this.loading = true;
    this.options = options;
    this.printInProgress = false;
    this.userMenuOpen = false;
    this.selectedPrinter = { id: '', location: '', name: '' };
    // needs to be initialised with empty strings
    this.selectedProperties = {
      paper: '',
      paperid: '',
      color: '',
      duplex: '',
      duplexmode: '',
      orientation: '',
      copies: '',
      resolution: '',
    };
    this.previouslySelectedProperties = {
      paper: '',
      paperid: '',
      color: '',
      duplex: '',
      duplexmode: '',
      orientation: '',
      copies: '',
      resolution: '',
    };
    /**
     *
     * Private methods
     *
     */
    /** Description... */
    this.handleCancel = () => {
      this.printCancel.emit();
    };
    /** Description... */
    this.handlePrint = () => {
      this.printInProgress = true;
      this.printService
        .printFileByUrl(authStore.state.accessToken, this.fileurl, this.filetype, this.selectedPrinter.id, 
      // we have to initialse this obj with empty strings to display the select component
      // but don't want to send any attributes with empty strings to the API
      removeEmptyStrings(this.selectedProperties), this.filename)
        .then((data) => {
        if (data.jobid) {
          printStore.state.jobID = data.jobid;
          const POLL_INTERVAL = 2000;
          const validateData = (data) => {
            if (data.jobstatus === 0) {
              this.printInProgress = false;
              return true;
            }
            return false;
          };
          poll({
            fn: this.printService.getPrintStatus,
            validate: validateData,
            interval: POLL_INTERVAL,
            maxAttempts: 10,
          })
            .then(data)
            .catch((err) => {
            console.warn(err);
            this.printInProgress = false;
          });
        }
        else {
          this.printInProgress = false;
        }
      });
      localStorage.setItem('properties', JSON.stringify(this.selectedProperties));
      localStorage.setItem('printer', JSON.stringify(this.selectedPrinter));
      localStorage.setItem('previouslySelectedProperties', JSON.stringify(this.previouslySelectedProperties));
      // this.printSubmit.emit()
    };
    this.handleUserMenu = () => {
      this.userMenuOpen = true;
    };
  }
  /**
   *
   * Listeners
   *
   */
  listenSelectSelection(event) {
    this.setSelectedProperties(event.detail);
  }
  listenUserMenuClosure() {
    this.userMenuOpen = false;
  }
  listenLogout() {
    this.printCancel.emit();
  }
  getPropertiesFromLocalStorage() {
    if (localStorage.getItem('properties')) {
      this.selectedProperties = JSON.parse(localStorage.getItem('properties'));
    }
    if (localStorage.getItem('printer')) {
      this.selectedPrinter = JSON.parse(localStorage.getItem('printer'));
    }
    else {
      this.selectedPrinter = { id: '', location: '', name: '' };
    }
    if (localStorage.getItem('previouslySelectedProperties')) {
      this.previouslySelectedProperties = JSON.parse(localStorage.getItem('previouslySelectedProperties'));
    }
  }
  getUserInfo() {
    const userService = new EzpUserService();
    return userService.getUserInfo().then((user) => {
      userStore.state.user = user;
      this.userName = userStore.state.user.display_name;
    });
  }
  setSelectedProperties(eventDetails) {
    switch (eventDetails.type) {
      case 'printer':
        this.selectedPrinter.id = eventDetails.id;
        this.selectedPrinter.name = eventDetails.title;
        break;
      case 'color':
        this.selectedProperties.color = !!eventDetails.id;
        this.previouslySelectedProperties.color = eventDetails.title;
        break;
      case 'orientation':
        this.selectedProperties.orientation = eventDetails.id;
        this.previouslySelectedProperties.orientation = eventDetails.title;
        break;
      case 'format':
        this.selectedProperties.paper = eventDetails.title;
        this.selectedProperties.paperid = eventDetails.id;
        this.previouslySelectedProperties.paper = eventDetails.title;
        this.previouslySelectedProperties.paperid = eventDetails.id;
        break;
    }
  }
  /**
   *
   * Lifecycle methods
   *
   */
  /** Description... */
  async componentWillLoad() {
    initi18n();
    this.loading = true;
    this.getPropertiesFromLocalStorage();
    this.getUserInfo();
    this.printService = new EzpPrintService(this.redirectURI, this.clientID);
    await this.printService
      .getPrinterList(authStore.state.accessToken)
      .then((printers) => {
      this.printers = printers;
    });
    await this.printService
      .getAllPrinterProperties(authStore.state.accessToken)
      .then((printerConfig) => {
      this.printerConfig = printerConfig[0];
    });
    this.loading = false;
  }
  /**
   *
   * Render method
   *
   */
  render() {
    return this.loading ? (h("ezp-progress", { status: i18next.t('printer_selection.loading') })) : (h(Host, { exportparts: "test: hello" }, this.printInProgress ? (h("ezp-progress", { status: i18next.t('printer_selection.print_in_progress') })) : null, h("div", { id: "container", "data-backdrop-surface": true }, h("div", { id: "header" }, h("ezp-label", { weight: "heavy", text: i18next.t('printer_selection.print') + ':' }), h("ezp-label", { text: this.filename }), h("ezp-icon-button", { level: "tertiary", icon: "menu", id: "toggle-menu", type: "button", onClick: this.handleUserMenu })), h("div", { id: "content" }, h("div", { id: "printer" }, h("ezp-select", { label: i18next.t('printer_selection.printer'), icon: "printer", placeholder: i18next.t('printer_selection.select_printer'), toggleFlow: "vertical", optionFlow: "vertical", options: this.printers.map((printer) => ({
        id: printer.id,
        title: printer.name,
        meta: printer.location,
        type: 'printer',
      })), preSelected: this.selectedPrinter.name })), h("div", { id: "options" }, h("ezp-select", { label: i18next.t('printer_selection.color'), placeholder: i18next.t('printer_selection.select_color'), toggleFlow: "horizontal", options: this.printerConfig.Color
        ? [
          {
            id: 1,
            title: i18next.t('printer_selection.color_color'),
            meta: '',
            type: 'color',
          },
        ]
        : [
          {
            id: 0,
            title: i18next.t('printer_selection.color_grayscale'),
            meta: '',
            type: 'color',
          },
        ], preSelected: this.previouslySelectedProperties.color }), h("ezp-select", { label: i18next.t('printer_selection.orientation'), placeholder: i18next.t('printer_selection.select_orientation'), toggleFlow: "horizontal", options: this.printerConfig.OrientationsSupported.map((orientation, index) => ({
        id: this.printerConfig.OrientationsSupportedId[index],
        title: i18next.t(`printer_selection.orientation_${orientation}`),
        meta: '',
        type: 'orientation',
      })), preSelected: this.previouslySelectedProperties.orientation }), h("ezp-select", { label: i18next.t('printer_selection.size'), placeholder: i18next.t('printer_selection.select_size'), toggleFlow: "horizontal", optionFlow: "horizontal", options: this.printerConfig.PaperFormats.map((format) => ({
        id: format.Id,
        title: i18next.t(`printer_selection.format_${format.Name}`),
        meta: `${format.XRes} x ${format.YRes}`,
        type: 'format',
      })), preSelected: this.previouslySelectedProperties.paper }), h("ezp-select", { label: i18next.t('printer_selection.quality'), toggleFlow: "horizontal", options: this.qualityOptions.map((option) => ({
        id: option.id,
        title: option.title,
        meta: '',
        type: 'quality',
      })), preSelected: !this.previouslySelectedProperties.resolution
        ? 'Normal'
        : this.previouslySelectedProperties.resolution }), h("ezp-select", { label: i18next.t('printer_selection.duplex'), toggleFlow: "horizontal", options: this.duplexOptions.map((option) => ({
        id: option.id,
        title: option.title,
        meta: '',
        type: 'duplex',
      })), preSelected: !this.previouslySelectedProperties.duplex
        ? 'None'
        : this.previouslySelectedProperties.duplexmode }), h("ezp-stepper", { label: "Copies", max: 10 }))), h("div", { id: "footer" }, h("ezp-text-button", { type: "button", level: "secondary", onClick: this.handleCancel, label: i18next.t('button_actions.cancel') }), h("ezp-text-button", { type: "button", onClick: this.handlePrint, label: i18next.t('button_actions.print') })), h("ezp-user-menu", { open: this.userMenuOpen, name: this.userName }))));
  }
  static get style() { return ezpPrinterSelectionCss; }
};

const authApiHostUrl = "account.ezeep.com";
const printingApiHostUrl = "printapi.ezeep.com";
const config = {
	authApiHostUrl: authApiHostUrl,
	printingApiHostUrl: printingApiHostUrl
};

const ezpPrintingCss = ":host{-ms-flex-line-pack:center;align-content:center;background:var(--color-surface-primary);color:var(--color-foreground-primary);display:grid;font-family:\"Inter\", sans-serif;-webkit-font-feature-settings:\"calt\", \"liga\", \"ss03\", \"zero\", \"cv05\", \"cv10\";font-feature-settings:\"calt\", \"liga\", \"ss03\", \"zero\", \"cv05\", \"cv10\";-webkit-font-kerning:normal;font-kerning:normal;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;grid-template:auto/auto;-ms-flex-pack:center;justify-content:center;margin:0;min-height:100vh;-webkit-tap-highlight-color:transparent;text-rendering:optimizeLegibility;-webkit-text-size-adjust:none;--color-main-primary:#1f90b2;--color-main-secondary:#309abd;--color-main-tertiary:#0185a7;--color-accent-primary:#cf4160;--color-accent-secondary:#db4d6a;--color-accent-tertiary:#c33557;--color-on-main-primary:white;--color-on-accent-primary:white;--color-surface-primary:white;--color-surface-secondary:#f3f3f3;--color-surface-tertiary:white;--color-shade-primary:rgba(119, 119, 119, 0.1);--color-shade-secondary:rgba(119, 119, 119, 0.16);--color-shade-tertiary:rgba(119, 119, 119, 0.22);--color-foreground-primary:rgba(0, 0, 0, 0.94);--color-foreground-secondary:rgba(99, 99, 99, 0.9);--color-foreground-tertiary:rgba(99, 99, 99, 0.58);--color-outline-primary:rgba(119, 119, 119, 0.16);--color-outline-secondary:rgba(119, 119, 119, 0.26);--color-overlay:rgba(0, 0, 0, 0.26);--color-shadow:rgba(0, 0, 0, 0.04);--spacing-1:4px;--spacing-2:8px;--spacing-3:12px;--spacing-4:20px;--spacing-5:32px;--spacing-6:52px;--spacing-7:84px;--easing-in-quart:cubic-bezier(0.11, 0, 0.5, 0);--easing-in-out-quart:cubic-bezier(0.76, 0, 0.24, 1);--easing-in-out-cubic:cubic-bezier(0.65, 0, 0.35, 1);--easing-in-expo:cubic-bezier(0.7, 0, 0.84, 0);--easing-out-quart:cubic-bezier(0.25, 1, 0.5, 1);--easing-out-expo:cubic-bezier(0.16, 1, 0.3, 1);--hairline-color:var(--color-outline-primary)}@supports (color: color(display-p3 1 1 1)){:host{--color-main-primary:color(display-p3 0.1215686275 0.5647058824 0.6980392157/100%);--color-main-secondary:color(display-p3 0.1882352941 0.6039215686 0.7411764706/100%);--color-main-tertiary:color(display-p3 0.0039215686 0.5215686275 0.6549019608/100%);--color-accent-primary:color(display-p3 0.8117647059 0.2549019608 0.3764705882/100%);--color-accent-secondary:color(display-p3 0.8588235294 0.3019607843 0.4156862745/100%);--color-accent-tertiary:color(display-p3 0.7647058824 0.2078431373 0.3411764706/100%);--color-on-main-primary:color(display-p3 1 1 1/100%);--color-on-accent-primary:color(display-p3 1 1 1/100%);--color-surface-primary:color(display-p3 1 1 1/100%);--color-surface-secondary:color(display-p3 0.9529411765 0.9529411765 0.9529411765/100%);--color-surface-tertiary:color(display-p3 1 1 1/100%);--color-shade-primary:color(display-p3 0.4666666667 0.4666666667 0.4666666667/10%);--color-shade-secondary:color(display-p3 0.4666666667 0.4666666667 0.4666666667/16%);--color-shade-tertiary:color(display-p3 0.4666666667 0.4666666667 0.4666666667/22%);--color-foreground-primary:color(display-p3 0 0 0/94%);--color-foreground-secondary:color(display-p3 0.3882352941 0.3882352941 0.3882352941/90%);--color-foreground-tertiary:color(display-p3 0.3882352941 0.3882352941 0.3882352941/58%);--color-outline-primary:color(display-p3 0.4666666667 0.4666666667 0.4666666667/16%);--color-outline-secondary:color(display-p3 0.4666666667 0.4666666667 0.4666666667/26%);--color-overlay:color(display-p3 0 0 0/26%);--color-shadow:color(display-p3 0 0 0/4%)}}@media (-webkit-min-device-pixel-ratio: 1), (min-device-pixel-ratio: 1){:host{--hairline-width-positive:calc(1px / 1);--hairline-width-negative:calc(-1px / 1)}}@media (-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2){:host{--hairline-width-positive:calc(1px / 2);--hairline-width-negative:calc(-1px / 2)}}@media (-webkit-min-device-pixel-ratio: 3), (min-device-pixel-ratio: 3){:host{--hairline-width-positive:calc(1px / 3);--hairline-width-negative:calc(-1px / 3)}}@media (-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2){:host{--hairline-color:var(--color-outline-secondary)}}@media (prefers-color-scheme: dark){:host{--color-main-primary:#309abd;--color-main-secondary:#3fa5c8;--color-main-tertiary:#1f90b2;--color-accent-primary:#db4d6a;--color-accent-secondary:#e85874;--color-accent-tertiary:#cf4160;--color-on-main-primary:black;--color-on-accent-primary:black;--color-surface-primary:black;--color-surface-secondary:#1b1b1b;--color-surface-tertiary:#282828;--color-shade-primary:rgba(119, 119, 119, 0.28);--color-shade-secondary:rgba(119, 119, 119, 0.34);--color-shade-tertiary:rgba(119, 119, 119, 0.4);--color-foreground-primary:rgba(255, 255, 255, 0.94);--color-foreground-secondary:rgba(139, 139, 139, 0.9);--color-foreground-tertiary:rgba(139, 139, 139, 0.58);--color-outline-primary:rgba(119, 119, 119, 0.26);--color-outline-secondary:rgba(119, 119, 119, 0.32);--color-overlay:rgba(0, 0, 0, 0.68);--color-shadow:rgba(0, 0, 0, 0.1)}@supports (color: color(display-p3 1 1 1)){:host{--color-main-primary:color(display-p3 0.1882352941 0.6039215686 0.7411764706/100%);--color-main-secondary:color(display-p3 0.2470588235 0.6470588235 0.7843137255/100%);--color-main-tertiary:color(display-p3 0.1215686275 0.5647058824 0.6980392157/100%);--color-accent-primary:color(display-p3 0.8588235294 0.3019607843 0.4156862745/100%);--color-accent-secondary:color(display-p3 0.9098039216 0.3450980392 0.4549019608/100%);--color-accent-tertiary:color(display-p3 0.8117647059 0.2549019608 0.3764705882/100%);--color-on-main-primary:color(display-p3 0 0 0/100%);--color-on-accent-primary:color(display-p3 0 0 0/100%);--color-surface-primary:color(display-p3 0 0 0/100%);--color-surface-secondary:color(display-p3 0.1058823529 0.1058823529 0.1058823529/100%);--color-surface-tertiary:color(display-p3 0.1568627451 0.1568627451 0.1568627451/100%);--color-shade-primary:color(display-p3 0.4666666667 0.4666666667 0.4666666667/28%);--color-shade-secondary:color(display-p3 0.4666666667 0.4666666667 0.4666666667/34%);--color-shade-tertiary:color(display-p3 0.4666666667 0.4666666667 0.4666666667/40%);--color-foreground-primary:color(display-p3 1 1 1/94%);--color-foreground-secondary:color(display-p3 0.5450980392 0.5450980392 0.5450980392/90%);--color-foreground-tertiary:color(display-p3 0.5450980392 0.5450980392 0.5450980392/58%);--color-outline-primary:color(display-p3 0.4666666667 0.4666666667 0.4666666667/26%);--color-outline-secondary:color(display-p3 0.4666666667 0.4666666667 0.4666666667/32%);--color-overlay:color(display-p3 0 0 0/68%);--color-shadow:color(display-p3 0 0 0/10%)}}}";

const EzpPrinting$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    attachShadow(this);
    /**
     *
     * States
     *
     */
    /** Description... */
    this.printOpen = false;
    this.authOpen = false;
  }
  /**
   *
   * Listeners
   *
   */
  /** Description... */
  listenPrintCancel() {
    this.printOpen = false;
  }
  /** Description... */
  listenPrintSubmit() {
    this.printOpen = false;
  }
  /** Description... */
  listenAuthCancel() {
    this.authOpen = false;
  }
  listenAuthShow() {
    this.authOpen = true;
  }
  listenPrintShow() {
    this.printOpen = true;
  }
  /**
   *
   * Public methods
   *
   */
  async open() {
    if (authStore.state.isAuthorized) {
      this.printOpen = true;
    }
    else {
      this.authOpen = true;
    }
  }
  checkAuth() {
    const printService = new EzpPrintService(this.redirecturi, this.clientid);
    let accessToken = authStore.state.accessToken;
    if (accessToken === '') {
      accessToken = localStorage.getItem('access_token');
      authStore.state.accessToken = accessToken;
    }
    if (localStorage.getItem('isAuthorized')) {
      authStore.state.isAuthorized = !!localStorage.getItem('isAuthorized');
      this.authOpen = !authStore.state.isAuthorized;
    }
    printService.getConfig(authStore.state.accessToken).catch(() => {
      authStore.state.isAuthorized = false;
    });
  }
  componentWillLoad() {
    authStore.state.redirectUri = this.redirecturi;
    if (this.authapihosturl) {
      authStore.state.authApiHostUrl = this.authapihosturl;
    }
    else {
      authStore.state.authApiHostUrl = config.authApiHostUrl;
    }
    if (this.printapihosturl) {
      printStore.state.printApiHostUrl = this.printapihosturl;
    }
    else {
      printStore.state.printApiHostUrl = config.printingApiHostUrl;
    }
    sendCodeToParentWindow();
    this.checkAuth();
  }
  /**
   *
   * Render method
   *
   */
  render() {
    return (h(Host, null, this.authOpen ? (h("ezp-auth", { clientID: this.clientid, redirectURI: this.redirecturi, hidelogin: this.hidelogin })) : this.printOpen ? (h("ezp-printer-selection", { clientID: this.clientid, redirectURI: this.redirecturi, filename: this.filename, fileurl: this.fileurl, filetype: this.filetype })) : this.custom ? (h("slot", null)) : (h("ezp-icon-button", { id: "print-trigger", icon: "printer", slot: "trigger", type: "button", onClick: () => this.open() }))));
  }
  static get style() { return ezpPrintingCss; }
};

const ezpProgressCss = ":host{--box-separator-position:0 0 0 var(--hairline-width-positive);--duration:1s;--indicator-size:44px;--stroke-width:4;-ms-flex-line-pack:center;align-content:center;-ms-flex-align:center;align-items:center;background:var(--color-overlay);border-radius:8px;-webkit-box-sizing:border-box;box-sizing:border-box;display:grid;grid-template:auto/auto;height:100%;-ms-flex-pack:center;justify-content:center;justify-items:center;left:0;padding:var(--spacing-6);position:absolute;top:0;width:100%;z-index:9999}@media (prefers-color-scheme: dark){:host{--box-separator-position:inset 0 0 0 var(--hairline-width-positive)}}#box{background:var(--color-surface-tertiary);border-radius:3px;-webkit-box-shadow:var(--box-separator-position) var(--hairline-color);box-shadow:var(--box-separator-position) var(--hairline-color);display:grid;grid-row-gap:var(--spacing-2);grid-template-columns:1fr;grid-template-rows:repeat(2, auto);justify-items:center;padding:var(--spacing-4)}#indicator{-webkit-animation:rotate var(--duration) linear infinite;animation:rotate var(--duration) linear infinite;display:block;height:var(--indicator-size);-webkit-transform:rotate(0);transform:rotate(0);width:var(--indicator-size)}#track{fill:none;stroke:var(--color-outline-secondary);stroke-width:var(--stroke-width)}#value{-webkit-animation:offset var(--duration) linear alternate infinite;animation:offset var(--duration) linear alternate infinite;fill:none;stroke:var(--color-main-primary);stroke-dasharray:100;stroke-dashoffset:100;stroke-linecap:round;stroke-width:var(--stroke-width)}#status{color:var(--color-foreground-primary)}@-webkit-keyframes offset{100%{stroke-dashoffset:50}}@keyframes offset{100%{stroke-dashoffset:50}}@-webkit-keyframes rotate{100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes rotate{100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}";

const EzpProgress$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    attachShadow(this);
    /**
     *
     * Properties
     *
     */
    /** Status... */
    this.status = 'Status...';
  }
  /**
   *
   * Render method
   *
   */
  render() {
    return (h(Host, null, h("div", { id: "box" }, h("svg", { id: "indicator", viewBox: "0 0 44 44", xmlns: "http://www.w3.org/2000/svg" }, h("circle", { id: "track", cx: "22", cy: "22", r: "16" }), h("circle", { id: "value", cx: "22", cy: "22", r: "16" })), h("ezp-label", { id: "status", level: "tertiary", weight: "strong", text: this.status }))));
  }
  static get style() { return ezpProgressCss; }
};

const ezpSelectCss = ":host{--accessory-color:var(--color-foreground-secondary);--details-columns:1fr;--details-rows:auto;--duration:0.3s;--host-height:var(--toggle-height);--host-transition:z-index 0s var(--duration);--host-z-index:3;--icon-color:var(--color-foreground-secondary);--indicator-opacity:0;--indicator-transform:translateX(var(--spacing-3));--indicator-transition:opacity var(--indicator-duration) var(--easing-out-quart),\n    transform var(--indicator-duration) var(--easing-out-quart),\n    visibility 0s var(--indicator-duration);--indicator-visibility:hidden;--label-align:auto;--label-color:var(--color-foreground-secondary);--list-height:0;--list-separator-position:inset 0 var(--hairline-width-positive);--option-height:auto;--toggle-areas:none;--toggle-columns:none;--toggle-height:auto;--toggle-rows:auto;--value-align:auto;--wrap-radius:0;--wrap-separator-color:var(--hairline-color);--wrap-separator-position-bottom:0 var(--hairline-width-positive) 0 0;--wrap-separator-position-left:var(--hairline-width-negative) 0 0 0;--wrap-separator-position-right:var(--hairline-width-positive) 0 0 0;--wrap-separator-position-top:0 var(--hairline-width-negative) 0 0;--wrap-translate-y:0;display:block;height:var(--host-height);position:relative;-webkit-transition:var(--host-transition);transition:var(--host-transition);z-index:var(--host-z-index)}:host(:first-child){--wrap-radius:3px 3px 0 0}:host(:last-child){--wrap-radius:0 0 3px 3px}:host(:first-child:last-child){--wrap-radius:3px}:host(:not(:last-child):not(.is-expanded)){--wrap-separator-position-bottom:0 0 0 0}:host(.toggle-horizontal){--label-align:start;--toggle-areas:\"label value accessory\";--toggle-columns:1fr repeat(2, auto);--toggle-height:34px;--toggle-rows:auto;--value-align:end}:host(.toggle-horizontal.has-icon){--toggle-areas:\"icon label value accessory\";--toggle-columns:auto 1fr repeat(2, auto)}:host(.toggle-vertical){--label-align:center;--toggle-areas:\"label accessory\" \"value accessory\";--toggle-columns:1fr auto;--toggle-height:52px;--toggle-rows:repeat(2, auto);--value-align:center}:host(.toggle-vertical.has-icon){--toggle-areas:\"icon label accessory\" \"icon value accessory\";--toggle-columns:auto 1fr auto}:host(.option-horizontal){--details-columns:repeat(2, 1fr);--details-rows:auto;--option-height:34px}:host(.option-vertical){--details-columns:1fr;--details-rows:repeat(2, auto);--option-height:52px}:host(.is-expanded){--accessory-color:var(--color-main-primary);--host-transition:z-index 0s 0s;--host-z-index:9999;--icon-color:var(--color-main-primary);--label-color:var(--color-main-primary);--wrap-radius:3px}@media (prefers-color-scheme: dark){:host{--list-separator-position:0 var(--hairline-width-negative) 0 0;--wrap-separator-position-bottom:inset 0 var(--hairline-width-negative) 0 0;--wrap-separator-position-left:inset var(--hairline-width-positive) 0 0 0;--wrap-separator-position-right:inset var(--hairline-width-negative) 0 0 0;--wrap-separator-position-top:inset 0 var(--hairline-width-positive) 0 0}}#wrap{background:var(--color-surface-tertiary);border-radius:var(--wrap-radius);-webkit-box-shadow:var(--wrap-separator-position-top) var(--wrap-separator-color), var(--wrap-separator-position-right) var(--wrap-separator-color), var(--wrap-separator-position-bottom) var(--wrap-separator-color), var(--wrap-separator-position-left) var(--wrap-separator-color);box-shadow:var(--wrap-separator-position-top) var(--wrap-separator-color), var(--wrap-separator-position-right) var(--wrap-separator-color), var(--wrap-separator-position-bottom) var(--wrap-separator-color), var(--wrap-separator-position-left) var(--wrap-separator-color);-webkit-transform:translateY(var(--wrap-translate-y));transform:translateY(var(--wrap-translate-y));-webkit-transition:border-radius var(--duration) var(--easing-out-quart), -webkit-transform var(--duration) var(--easing-out-quart), -webkit-box-shadow var(--duration) var(--easing-out-quart);transition:border-radius var(--duration) var(--easing-out-quart), -webkit-transform var(--duration) var(--easing-out-quart), -webkit-box-shadow var(--duration) var(--easing-out-quart);transition:transform var(--duration) var(--easing-out-quart), border-radius var(--duration) var(--easing-out-quart), box-shadow var(--duration) var(--easing-out-quart);transition:transform var(--duration) var(--easing-out-quart), border-radius var(--duration) var(--easing-out-quart), box-shadow var(--duration) var(--easing-out-quart), -webkit-transform var(--duration) var(--easing-out-quart), -webkit-box-shadow var(--duration) var(--easing-out-quart)}#toggle{-webkit-box-sizing:border-box;box-sizing:border-box;cursor:pointer;display:grid;gap:var(--spacing-2);grid-template-areas:var(--toggle-areas);grid-template-columns:var(--toggle-columns);grid-template-rows:var(--toggle-rows);height:var(--toggle-height);padding:var(--spacing-3)}#toggle:hover{background:var(--color-shade-primary)}#icon{align-self:center;color:var(--icon-color);grid-area:icon;margin:calc(var(--spacing-3) * -1) 0}#label{align-self:var(--label-align);color:var(--label-color);grid-area:label}#value{align-self:var(--value-align);color:var(--color-foreground-primary);grid-area:value}#accessory{align-self:center;color:var(--accessory-color);grid-area:accessory;margin:calc(var(--spacing-3) * -1) 0}#list{-webkit-box-shadow:var(--list-separator-position) var(--hairline-color);box-shadow:var(--list-separator-position) var(--hairline-color);height:var(--list-height);overflow:auto;-webkit-transition:height var(--duration) var(--easing-out-quart);transition:height var(--duration) var(--easing-out-quart)}.option{background:var(--option-background);-webkit-box-sizing:border-box;box-sizing:border-box;cursor:pointer;display:grid;grid-column-gap:var(--spacing-3);grid-row-gap:var(--spacing-2);grid-template-columns:auto 1fr;grid-template-rows:auto;height:var(--option-height);padding:0 0 0 var(--spacing-3)}.option:not(:first-child){--details-separator:0 var(--hairline-width-negative) 0 0 var(--hairline-color)}.option:hover{--option-background:var(--color-shade-primary)}.option:hover,.option:hover+.option{--details-separator:none}.option:active{--option-background:var(--color-shade-secondary)}.option.is-selected{--indicator-opacity:1;--indicator-transform:translateX(0);--indicator-transition:opacity var(--duration) var(--easing-out-quart),\n    transform var(--duration) var(--easing-out-quart), visibility 0s 0s;--indicator-visibility:visible}.indicator{-ms-flex-item-align:center;align-self:center;color:var(--color-main-primary);margin:calc(var(--spacing-3) * -1) 0;opacity:var(--indicator-opacity);-webkit-transform:var(--indicator-transform);transform:var(--indicator-transform);-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition);visibility:var(--indicator-visibility)}.details{-webkit-box-shadow:var(--details-separator);box-shadow:var(--details-separator);display:grid;gap:var(--spacing-2);grid-template-columns:var(--details-columns);grid-template-rows:var(--details-rows);padding:var(--spacing-3) var(--spacing-3) var(--spacing-3) 0}.title{-ms-flex-item-align:start;align-self:start;color:var(--color-foreground-primary)}.meta{-ms-flex-item-align:end;align-self:end;color:var(--color-foreground-secondary)}";

const EzpSelect$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    attachShadow(this);
    this.selectToggle = createEvent(this, "selectToggle", 7);
    this.selectSelection = createEvent(this, "selectSelection", 7);
    this.backdrop = document.createElement('ezp-backdrop');
    this.containerHeight = 0;
    this.expandCover = false;
    this.expandRise = false;
    this.listHeight = 0;
    this.spacing = 6;
    this.toggleHeight = 0;
    this.wrapDiff = 0;
    this.wrapHeight = 0;
    this.wrapTop = 0;
    this.duration = 0;
    /** Description... */
    this.label = 'Label';
    /** Description... */
    this.placeholder = 'Placeholder';
    /** Description... */
    this.toggleFlow = 'horizontal';
    /**
     *
     * States
     *
     */
    /** Description... */
    this.expanded = false;
    /** Description... */
    this.selected = { id: 0, title: '', meta: '' };
    /**
     *
     * Private methods
     *
     */
    this.toggle = () => {
      this.expanded = !this.expanded;
      this.selectToggle.emit(this.expanded);
    };
    this.select = (id) => {
      const delay = this.selected.id === id ? 0 : this.duration * 1000;
      this.selected = this.options.find((option) => option.id === id);
      this.selectSelection.emit(this.selected);
      window.setTimeout(() => {
        this.toggle();
      }, delay);
    };
  }
  /**
   *
   * Watchers
   *
   */
  watchExpanded() {
    if (this.expandCover) {
      this.component.style.setProperty('--list-height', this.expanded ? `${this.containerHeight - this.toggleHeight}px` : '0px');
      this.component.style.setProperty('--wrap-translate-y', this.expanded ? `${this.wrapTop * -1 + this.spacing}px` : '0px');
    }
    else if (this.expandRise) {
      this.component.style.setProperty('--list-height', this.expanded ? `${this.listHeight}px` : '0px');
      this.component.style.setProperty('--wrap-translate-y', this.expanded ? `${this.wrapDiff + this.spacing}px` : '0px');
    }
    else {
      this.component.style.setProperty('--list-height', this.expanded ? `${this.listHeight}px` : '0px');
    }
    if (this.expanded) {
      this.backdrop.visible = true;
      this.container.appendChild(this.backdrop);
    }
    else {
      this.backdrop.visible = false;
    }
  }
  /**
   *
   * Lifecycle methods
   *
   */
  componentWillLoad() {
    this.container = this.component.closest('[data-backdrop-surface]');
    this.backdrop.addEventListener('backdropHideStart', () => {
      this.expanded = false;
    });
    this.backdrop.addEventListener('backdropHideEnd', () => {
      this.container.removeChild(this.backdrop);
    });
    if (this.preSelected) {
      this.selected = this.options.find((option) => typeof this.preSelected === 'number'
        ? option.id === this.preSelected
        : option.title === this.preSelected);
    }
  }
  componentDidLoad() {
    const styles = getComputedStyle(this.component);
    this.toggleHeight = parseInt(styles.getPropertyValue('--toggle-height'));
    this.duration = parseFloat(styles.getPropertyValue('--duration'));
    this.containerHeight = this.container.clientHeight - this.spacing * 2;
    this.listHeight = this.list.scrollHeight;
    this.wrapTop = this.component.offsetTop;
    this.wrapHeight = this.toggleHeight + this.listHeight;
    this.expandCover = this.wrapHeight > this.containerHeight;
    this.expandRise = this.wrapHeight > this.containerHeight - this.wrapTop;
    this.wrapDiff = this.containerHeight - this.wrapHeight - this.wrapTop;
  }
  /**
   *
   * Render method
   *
   */
  render() {
    const hostClasses = [
      this.expanded ? 'is-expanded' : '',
      this.icon ? 'has-icon' : '',
      `toggle-${this.toggleFlow}`,
      this.optionFlow ? `option-${this.optionFlow}` : '',
    ];
    const labelLevel = this.toggleFlow === 'horizontal' ? 'secondary' : 'tertiary';
    return (h(Host, { class: hostClasses.join(' ') }, h("div", { id: "wrap" }, h("div", { id: "toggle", onClick: () => this.toggle() }, this.icon ? h("ezp-icon", { id: "icon", name: this.icon }) : null, h("ezp-label", { id: "label", noWrap: true, level: labelLevel, text: this.label }), h("ezp-label", { id: "value", ellipsis: true, text: this.selected.title !== '' ? this.selected.title : this.placeholder }), h("ezp-icon", { id: "accessory", name: "expand" })), h("div", { id: "list", ref: (element) => (this.list = element) }, this.options.map((option) => (h("div", { class: `option ${option.id === this.selected.id ? 'is-selected' : ''} ${option.meta !== '' ? 'has-meta' : ''} `, onClick: () => this.select(option.id) }, h("ezp-icon", { name: "checkmark", class: "indicator" }), h("div", { class: "details" }, h("ezp-label", { class: "title", ellipsis: true, text: option.title }), option.meta !== '' ? (h("ezp-label", { level: "tertiary", class: "meta", text: option.meta })) : null))))))));
  }
  get component() { return this; }
  static get watchers() { return {
    "expanded": ["watchExpanded"]
  }; }
  static get style() { return ezpSelectCss; }
};

const ezpStepperCss = ":host{-ms-flex-align:center;align-items:center;background:var(--color-surface-tertiary);border-radius:var(--stepper-radius, 0);-webkit-box-shadow:0 0 0 var(--hairline-width-positive) var(--hairline-color);box-shadow:0 0 0 var(--hairline-width-positive) var(--hairline-color);display:grid;gap:var(--spacing-3);grid-template:auto/auto 1fr auto;padding:0 var(--spacing-3)}:host(:first-child){--stepper-radius:3px 3px 0 0}:host(:last-child){--stepper-radius:0 0 3px 3px}:host(:first-child:last-child){--stepper-radius:3px}#label{color:var(--color-foreground-secondary)}#input{-moz-appearance:textfield;-webkit-appearance:none;appearance:none;background:var(--stepper-input-background, transparent);border:0;border-radius:0;-webkit-box-shadow:none;box-shadow:none;color:var(--color-foreground-primary);font-family:inherit;-webkit-font-feature-settings:\"tnum\";font-feature-settings:\"tnum\";font-size:15px;-webkit-font-smoothing:antialiased;height:34px;letter-spacing:-0.009em;margin:0;outline:none;padding:0;text-align:right;width:100%}#input::-webkit-outer-spin-button,#input::-webkit-inner-spin-button{-webkit-appearance:none;margin:0}.buttons{display:-ms-flexbox;display:flex;gap:1px}.button{-ms-flex-align:center;align-items:center;-webkit-appearance:none;-moz-appearance:none;appearance:none;background:var(--stepper-button-background, var(--color-shade-primary));border:0;border-radius:var(--stepper-button-radius);-webkit-box-shadow:none;box-shadow:none;color:var(--stepper-button-color, var(--color-foreground-secondary));cursor:var(--stepper-button-cursor, pointer);display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;margin:0;outline:none;padding:0}.button:first-child{--stepper-button-radius:3px 0 0 3px}.button:last-child{--stepper-button-radius:0 3px 3px 0}@media (hover: hover){.button:not(:disabled):hover{--stepper-button-background:var(--color-shade-secondary)}.button:not(:disabled):active{--stepper-button-background:var(--color-shade-tertiary)}}.button:disabled{--stepper-button-color:var(--color-foreground-tertiary);--stepper-button-background:transparent;--stepper-button-cursor:not-allowed}";

const EzpStepper$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    attachShadow(this);
    /**
     *
     * Properties
     *
     */
    /** Description... */
    this.label = 'Label';
    /** Description... */
    this.min = 1;
    /**
     *
     * States
     *
     */
    /** Description... */
    this.canDecrease = true;
    /** Description... */
    this.canIncrease = true;
    /** Description... */
    this.value = 1;
    /**
     *
     * Private methods
     *
     */
    this.handleDecrease = () => {
      this.value--;
    };
    this.handleIncrease = () => {
      this.value++;
    };
    this.handleInput = () => {
      this.value = this.input.value !== '' ? parseInt(this.input.value) : this.min;
    };
  }
  /**
   *
   * Watchers
   *
   */
  watchValue() {
    this.canIncrease = this.max !== undefined ? this.value < this.max : true;
    this.canDecrease = this.min !== undefined ? this.value > this.min : true;
  }
  /**
   *
   * Lifecycle methods
   *
   */
  componentWillLoad() {
    this.watchValue();
  }
  /**
   *
   * Render method
   *
   */
  render() {
    return (h(Host, null, h("ezp-label", { noWrap: true, id: "label", text: this.label }), h("input", { id: "input", type: "number", ref: (input) => (this.input = input), min: this.min.toString(), max: this.max.toString(), value: this.value.toString(), onInput: this.handleInput }), h("div", { class: "buttons" }, h("button", { class: "button", disabled: !this.canDecrease, onClick: this.handleDecrease }, h("ezp-icon", { name: "minus" })), h("button", { class: "button", disabled: !this.canIncrease, onClick: this.handleIncrease }, h("ezp-icon", { name: "plus" })))));
  }
  static get watchers() { return {
    "value": ["watchValue"]
  }; }
  static get style() { return ezpStepperCss; }
};

const ezpTextButtonCss = ":host{--button-background-active:transparent;--button-background-disabled:transparent;--button-background-hover:transparent;--button-background-init:transparent;--button-background:var(--button-background-init);--button-color-disabled:inherit;--button-color-init:inherit;--button-color:var(--button-color-init);--button-cursor:pointer;display:-ms-flexbox;display:flex}:host(.primary){--button-background-active:var(--color-main-tertiary);--button-background-disabled:var(--color-shade-primary);--button-background-hover:var(--color-main-secondary);--button-background-init:var(--color-main-primary);--button-color-disabled:var(--color-foreground-tertiary);--button-color-init:var(--color-on-main-primary)}:host(.secondary){--button-background-active:var(--color-shade-tertiary);--button-background-disabled:var(--color-shade-primary);--button-background-hover:var(--color-shade-secondary);--button-background-init:var(--color-shade-primary);--button-color-disabled:var(--color-foreground-tertiary);--button-color-init:var(--color-main-primary)}:host(.tertiary){--button-background-active:var(--color-shade-secondary);--button-background-hover:var(--color-shade-primary);--button-color-disabled:var(--color-foreground-tertiary);--button-color-init:var(--color-main-primary)}.button{-ms-flex-align:center;align-items:center;-webkit-appearance:none;-moz-appearance:none;appearance:none;background:var(--button-background);border:0;border-radius:3px;-webkit-box-shadow:none;box-shadow:none;color:var(--button-color);cursor:var(--button-cursor);display:-ms-flexbox;display:flex;font-family:inherit;-ms-flex-pack:center;justify-content:center;margin:0;outline:none;padding:var(--spacing-3);white-space:nowrap;width:100%}@media (hover: hover){.button:not(:disabled):hover{--button-background:var(--button-background-hover)}.button:not(:disabled):active{--button-background:var(--button-background-active)}}.button:disabled{--button-background:var(--button-background-disabled);--button-color:var(--button-color-disabled);--button-cursor:not-allowed}";

const EzpTextButton$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    attachShadow(this);
    /**
     *
     * Properties
     *
     */
    /** Description... */
    this.blank = false;
    /** Description... */
    this.disabled = false;
    /** Description... */
    this.level = 'primary';
  }
  /**
   *
   * Render method
   *
   */
  render() {
    const TagType = this.type !== undefined ? 'button' : 'a';
    const attributes = this.type !== undefined
      ? {
        type: this.type,
        disabled: this.disabled,
      }
      : {
        href: this.href,
        target: this.blank ? '_blank' : '_self',
      };
    return (h(Host, { class: `${this.level}` }, h(TagType, Object.assign({ class: "button" }, attributes), h("ezp-label", { weight: "heavy", text: this.label }))));
  }
  static get style() { return ezpTextButtonCss; }
};

const ezpUserMenuCss = ":host{--duration:0.3s;--host-opacity:0;--host-scale:0.94, 0.94;--host-separator-position:0 0 0 var(--hairline-width-positive);--host-transition:opacity var(--duration) var(--easing-out-quart),\n    transform var(--duration) var(--easing-out-quart), visibility 0s var(--duration);--host-visibility:hidden;--link-background:transparent;background:var(--color-surface-tertiary);border-radius:3px;-webkit-box-shadow:var(--host-separator-position) var(--hairline-color);box-shadow:var(--host-separator-position) var(--hairline-color);display:block;left:var(--spacing-7);opacity:var(--host-opacity);position:absolute;right:var(--spacing-2);top:var(--spacing-2);-webkit-transform:scale(var(--host-scale));transform:scale(var(--host-scale));-webkit-transform-origin:right top;transform-origin:right top;-webkit-transition:var(--host-transition);transition:var(--host-transition);visibility:var(--host-visibility);z-index:5}:host(.is-open){--host-opacity:1;--host-scale:1, 1;--host-transition:opacity var(--duration) var(--easing-out-quart),\n    transform var(--duration) var(--easing-out-quart), visibility 0s 0s;--host-visibility:visible}@media (prefers-color-scheme: dark){:host{--host-separator-position:inset 0 0 0 var(--hairline-width-positive)}}#header{-ms-flex-align:center;align-items:center;-webkit-box-shadow:0 var(--hairline-width-positive) 0 0 var(--hairline-color);box-shadow:0 var(--hairline-width-positive) 0 0 var(--hairline-color);-webkit-box-shadow:0;box-shadow:0;display:grid;grid-template:auto/1fr auto;padding:var(--spacing-3) var(--spacing-2) var(--spacing-3) var(--spacing-3)}#name{color:var(--color-foreground-primary)}#close{margin:calc(var(--spacing-3) * -1) 0 calc(var(--spacing-3) * -1) 0}#links{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}#organizations{z-index:9999}.link{-ms-flex-align:center;align-items:center;background:var(--link-background);color:var(--color-foreground-primary);cursor:pointer;display:grid;gap:var(--spacing-2);grid-template:auto/auto 1fr;padding:var(--spacing-3);text-decoration:none}.link:hover{--link-background:var(--color-shade-primary)}.link__icon{color:var(--color-main-primary);margin:calc(var(--spacing-3) * -1) 0}.logout{-ms-flex-align:center;align-items:center;background:var(--link-background);color:var(--color-foreground-primary);display:grid;gap:var(--spacing-3);grid-template:auto/auto 1fr;padding:var(--spacing-3)}.logout:hover{--link-background:var(--color-shade-primary);cursor:pointer}.logout__icon{color:var(--color-main-primary);margin:calc(var(--spacing-3) * -1) 0}";

const EzpUserMenu$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    attachShadow(this);
    this.userMenuClosure = createEvent(this, "userMenuClosure", 7);
    this.logoutEmitter = createEvent(this, "logoutEmitter", 7);
    this.backdrop = document.createElement('ezp-backdrop');
    this.links = [
      {
        title: 'Manage Account',
        icon: 'user',
        href: 'https://app.ezeep.com',
      },
      {
        title: 'Help & Support',
        icon: 'question',
        href: 'https://support.ezeep.com',
      },
      /* {
        title: 'Logout',
        icon: 'off',
        href: '#',
      }, */
    ];
    /*
    private organizations = [
      {
        id: 1,
        name: 'Organization 1',
      },
      {
        id: 2,
        name: 'Organization 2',
      },
      {
        id: 3,
        name: 'Organization 3',
      },
    ] */
    this.name = 'John Doe';
    this.open = false;
    this.handleClose = () => {
      this.userMenuClosure.emit();
    };
    this.logOut = () => {
      localStorage.clear();
      authStore.state.isAuthorized = false;
      this.logoutEmitter.emit();
    };
  }
  /**
   *
   * Privatre methods
   *
   */
  /**
   *
   * Watchers
   *
   */
  watchOpen() {
    if (this.open) {
      this.backdrop.visible = true;
      this.container.appendChild(this.backdrop);
    }
    else {
      this.backdrop.visible = false;
      this.userMenuClosure.emit();
    }
  }
  /**
   *
   * Render method
   *
   */
  componentWillLoad() {
    this.container = this.component.closest('[data-backdrop-surface]');
    this.backdrop.addEventListener('backdropHideStart', () => {
      this.open = false;
    });
    this.backdrop.addEventListener('backdropHideEnd', () => {
      this.container.removeChild(this.backdrop);
    });
  }
  /**
   *
   * Render method
   *
   */
  render() {
    return (h(Host, { class: this.open ? 'is-open' : '' }, h("div", { id: "header" }, h("ezp-label", { ellipsis: true, id: "name", weight: "strong", text: this.name }), h("ezp-icon-button", { id: "close", level: "quaternary", icon: "cross", onClick: this.handleClose })), h("div", { id: "links" }, this.links.map((link) => (h("a", { class: "link", href: link.href, target: "_blank", rel: "noopener noreferrer" }, h("ezp-icon", { class: "link__icon", name: link.icon }), h("ezp-label", { text: link.title })))), h("a", { class: "link", onClick: this.logOut }, h("ezp-icon", { class: "link__icon", name: "off" }), h("ezp-label", { text: "Logout" })))));
  }
  get component() { return this; }
  static get watchers() { return {
    "open": ["watchOpen"]
  }; }
  static get style() { return ezpUserMenuCss; }
};

globalScripts();
const EzpAuth = /*@__PURE__*/proxyCustomElement(EzpAuth$1, [1,"ezp-auth",{"clientID":[1025,"client-i-d"],"redirectURI":[1025,"redirect-u-r-i"],"hidelogin":[4],"auth":[32],"authURI":[32],"accessToken":[32]}]);
const EzpBackdrop = /*@__PURE__*/proxyCustomElement(EzpBackdrop$1, [1,"ezp-backdrop",{"visible":[1028]},[[0,"animationend","listenAnimationEnd"]]]);
const EzpIcon = /*@__PURE__*/proxyCustomElement(EzpIcon$1, [1,"ezp-icon",{"name":[1],"size":[1]}]);
const EzpIconButton = /*@__PURE__*/proxyCustomElement(EzpIconButton$1, [1,"ezp-icon-button",{"blank":[4],"disabled":[4],"href":[1],"icon":[1],"level":[1],"type":[1]}]);
const EzpLabel = /*@__PURE__*/proxyCustomElement(EzpLabel$1, [1,"ezp-label",{"ellipsis":[4],"level":[1],"noWrap":[4,"no-wrap"],"text":[1],"weight":[1]}]);
const EzpPrinterSelection = /*@__PURE__*/proxyCustomElement(EzpPrinterSelection$1, [1,"ezp-printer-selection",{"clientID":[1,"client-i-d"],"redirectURI":[1,"redirect-u-r-i"],"filename":[1],"fileurl":[1],"filetype":[1],"loading":[32],"options":[32],"printInProgress":[32],"userMenuOpen":[32],"userName":[32],"printers":[32],"selectedPrinter":[32],"printerConfig":[32],"selectedProperties":[32],"previouslySelectedProperties":[32]},[[0,"selectSelection","listenSelectSelection"],[0,"userMenuClosure","listenUserMenuClosure"],[0,"logoutEmitter","listenLogout"]]]);
const EzpPrinting = /*@__PURE__*/proxyCustomElement(EzpPrinting$1, [1,"ezp-printing",{"clientid":[1],"redirecturi":[1],"filename":[1],"fileurl":[1],"filetype":[1],"custom":[4],"hidelogin":[4],"authapihosturl":[1],"printapihosturl":[1],"printOpen":[32],"authOpen":[32]},[[0,"printCancel","listenPrintCancel"],[0,"printSubmit","listenPrintSubmit"],[0,"authCancel","listenAuthCancel"],[0,"authShow","listenAuthShow"],[0,"printShow","listenPrintShow"]]]);
const EzpProgress = /*@__PURE__*/proxyCustomElement(EzpProgress$1, [1,"ezp-progress",{"status":[1]}]);
const EzpSelect = /*@__PURE__*/proxyCustomElement(EzpSelect$1, [1,"ezp-select",{"icon":[1],"label":[1],"optionFlow":[1,"option-flow"],"options":[16],"placeholder":[1],"preSelected":[8,"pre-selected"],"toggleFlow":[1,"toggle-flow"],"expanded":[32],"selected":[32]}]);
const EzpStepper = /*@__PURE__*/proxyCustomElement(EzpStepper$1, [1,"ezp-stepper",{"label":[1],"max":[2],"min":[2],"canDecrease":[32],"canIncrease":[32],"value":[32]}]);
const EzpTextButton = /*@__PURE__*/proxyCustomElement(EzpTextButton$1, [1,"ezp-text-button",{"blank":[4],"disabled":[4],"href":[1],"level":[1],"label":[1],"type":[1]}]);
const EzpUserMenu = /*@__PURE__*/proxyCustomElement(EzpUserMenu$1, [1,"ezp-user-menu",{"name":[1],"open":[1028]}]);
const defineCustomElements = (opts) => {
  if (typeof customElements !== 'undefined') {
    [
      EzpAuth,
  EzpBackdrop,
  EzpIcon,
  EzpIconButton,
  EzpLabel,
  EzpPrinterSelection,
  EzpPrinting,
  EzpProgress,
  EzpSelect,
  EzpStepper,
  EzpTextButton,
  EzpUserMenu
    ].forEach(cmp => {
      if (!customElements.get(cmp.is)) {
        customElements.define(cmp.is, cmp, opts);
      }
    });
  }
};

export { EzpAuth, EzpBackdrop, EzpIcon, EzpIconButton, EzpLabel, EzpPrinterSelection, EzpPrinting, EzpProgress, EzpSelect, EzpStepper, EzpTextButton, EzpUserMenu, defineCustomElements };
