import { Component, Host, Prop, State, Watch, Element, Event, h } from '@stencil/core';
export class EzpSelect {
  constructor() {
    this.backdrop = document.createElement('ezp-backdrop');
    this.containerHeight = 0;
    this.expandCover = false;
    this.expandRise = false;
    this.listHeight = 0;
    this.spacing = 6;
    this.toggleHeight = 0;
    this.wrapDiff = 0;
    this.wrapHeight = 0;
    this.wrapTop = 0;
    this.duration = 0;
    /** Description... */
    this.label = 'Label';
    /** Description... */
    this.placeholder = 'Placeholder';
    /** Description... */
    this.toggleFlow = 'horizontal';
    /**
     *
     * States
     *
     */
    /** Description... */
    this.expanded = false;
    /** Description... */
    this.selected = { id: 0, title: '', meta: '' };
    /**
     *
     * Private methods
     *
     */
    this.toggle = () => {
      this.expanded = !this.expanded;
      this.selectToggle.emit(this.expanded);
    };
    this.select = (id) => {
      const delay = this.selected.id === id ? 0 : this.duration * 1000;
      this.selected = this.options.find((option) => option.id === id);
      this.selectSelection.emit(this.selected);
      window.setTimeout(() => {
        this.toggle();
      }, delay);
    };
  }
  /**
   *
   * Watchers
   *
   */
  watchExpanded() {
    if (this.expandCover) {
      this.component.style.setProperty('--list-height', this.expanded ? `${this.containerHeight - this.toggleHeight}px` : '0px');
      this.component.style.setProperty('--wrap-translate-y', this.expanded ? `${this.wrapTop * -1 + this.spacing}px` : '0px');
    }
    else if (this.expandRise) {
      this.component.style.setProperty('--list-height', this.expanded ? `${this.listHeight}px` : '0px');
      this.component.style.setProperty('--wrap-translate-y', this.expanded ? `${this.wrapDiff + this.spacing}px` : '0px');
    }
    else {
      this.component.style.setProperty('--list-height', this.expanded ? `${this.listHeight}px` : '0px');
    }
    if (this.expanded) {
      this.backdrop.visible = true;
      this.container.appendChild(this.backdrop);
    }
    else {
      this.backdrop.visible = false;
    }
  }
  /**
   *
   * Lifecycle methods
   *
   */
  componentWillLoad() {
    this.container = this.component.closest('[data-backdrop-surface]');
    this.backdrop.addEventListener('backdropHideStart', () => {
      this.expanded = false;
    });
    this.backdrop.addEventListener('backdropHideEnd', () => {
      this.container.removeChild(this.backdrop);
    });
    if (this.preSelected) {
      this.selected = this.options.find((option) => typeof this.preSelected === 'number'
        ? option.id === this.preSelected
        : option.title === this.preSelected);
    }
  }
  componentDidLoad() {
    const styles = getComputedStyle(this.component);
    this.toggleHeight = parseInt(styles.getPropertyValue('--toggle-height'));
    this.duration = parseFloat(styles.getPropertyValue('--duration'));
    this.containerHeight = this.container.clientHeight - this.spacing * 2;
    this.listHeight = this.list.scrollHeight;
    this.wrapTop = this.component.offsetTop;
    this.wrapHeight = this.toggleHeight + this.listHeight;
    this.expandCover = this.wrapHeight > this.containerHeight;
    this.expandRise = this.wrapHeight > this.containerHeight - this.wrapTop;
    this.wrapDiff = this.containerHeight - this.wrapHeight - this.wrapTop;
  }
  /**
   *
   * Render method
   *
   */
  render() {
    const hostClasses = [
      this.expanded ? 'is-expanded' : '',
      this.icon ? 'has-icon' : '',
      `toggle-${this.toggleFlow}`,
      this.optionFlow ? `option-${this.optionFlow}` : '',
    ];
    const labelLevel = this.toggleFlow === 'horizontal' ? 'secondary' : 'tertiary';
    return (h(Host, { class: hostClasses.join(' ') },
      h("div", { id: "wrap" },
        h("div", { id: "toggle", onClick: () => this.toggle() },
          this.icon ? h("ezp-icon", { id: "icon", name: this.icon }) : null,
          h("ezp-label", { id: "label", noWrap: true, level: labelLevel, text: this.label }),
          h("ezp-label", { id: "value", ellipsis: true, text: this.selected.title !== '' ? this.selected.title : this.placeholder }),
          h("ezp-icon", { id: "accessory", name: "expand" })),
        h("div", { id: "list", ref: (element) => (this.list = element) }, this.options.map((option) => (h("div", { class: `option ${option.id === this.selected.id ? 'is-selected' : ''} ${option.meta !== '' ? 'has-meta' : ''} `, onClick: () => this.select(option.id) },
          h("ezp-icon", { name: "checkmark", class: "indicator" }),
          h("div", { class: "details" },
            h("ezp-label", { class: "title", ellipsis: true, text: option.title }),
            option.meta !== '' ? (h("ezp-label", { level: "tertiary", class: "meta", text: option.meta })) : null))))))));
  }
  static get is() { return "ezp-select"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ezp-select.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["ezp-select.css"]
  }; }
  static get properties() { return {
    "icon": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "IconNameTypes",
        "resolved": "\"checkmark\" | \"cross\" | \"expand\" | \"menu\" | \"minus\" | \"off\" | \"plus\" | \"printer\" | \"question\" | \"rocket\" | \"user\"",
        "references": {
          "IconNameTypes": {
            "location": "import",
            "path": "../../shared/types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Description..."
      },
      "attribute": "icon",
      "reflect": false
    },
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Description..."
      },
      "attribute": "label",
      "reflect": false,
      "defaultValue": "'Label'"
    },
    "optionFlow": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "SelectFlowTypes",
        "resolved": "\"horizontal\" | \"vertical\"",
        "references": {
          "SelectFlowTypes": {
            "location": "import",
            "path": "../../shared/types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Description..."
      },
      "attribute": "option-flow",
      "reflect": false
    },
    "options": {
      "type": "unknown",
      "mutable": false,
      "complexType": {
        "original": "SelectOptionType[]",
        "resolved": "SelectOptionType[]",
        "references": {
          "SelectOptionType": {
            "location": "import",
            "path": "../../shared/types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Description..."
      }
    },
    "placeholder": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Description..."
      },
      "attribute": "placeholder",
      "reflect": false,
      "defaultValue": "'Placeholder'"
    },
    "preSelected": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Description..."
      },
      "attribute": "pre-selected",
      "reflect": false
    },
    "toggleFlow": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "SelectFlowTypes",
        "resolved": "\"horizontal\" | \"vertical\"",
        "references": {
          "SelectFlowTypes": {
            "location": "import",
            "path": "../../shared/types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Description..."
      },
      "attribute": "toggle-flow",
      "reflect": false,
      "defaultValue": "'horizontal'"
    }
  }; }
  static get states() { return {
    "expanded": {},
    "selected": {}
  }; }
  static get events() { return [{
      "method": "selectToggle",
      "name": "selectToggle",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Events"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "selectSelection",
      "name": "selectSelection",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "component"; }
  static get watchers() { return [{
      "propName": "expanded",
      "methodName": "watchExpanded"
    }]; }
}
