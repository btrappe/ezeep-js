import { Component, Host, Listen, Event, State, h, Prop } from '@stencil/core';
import i18next from 'i18next';
import authStore from '../../services/auth';
import printStore, { EzpPrintService } from '../../services/print';
import userStore, { EzpUserService } from '../../services/user';
import { initi18n, poll, removeEmptyStrings } from '../../utils/utils';
import options from '../../data/options.json';
export class EzpPrinterSelection {
  constructor() {
    this.duplexOptions = [
      {
        id: 1,
        title: 'None',
      },
      {
        id: 2,
        title: 'Long edge binding',
      },
      {
        id: 3,
        title: 'Short edge binding',
      },
    ];
    this.qualityOptions = [
      {
        id: 1,
        title: 'Draft',
      },
      {
        id: 2,
        title: 'Normal',
      },
      {
        id: 3,
        title: 'Best',
      },
    ];
    /**
     *
     * States
     *
     */
    this.loading = true;
    this.options = options;
    this.printInProgress = false;
    this.userMenuOpen = false;
    this.selectedPrinter = { id: '', location: '', name: '' };
    // needs to be initialised with empty strings
    this.selectedProperties = {
      paper: '',
      paperid: '',
      color: '',
      duplex: '',
      duplexmode: '',
      orientation: '',
      copies: '',
      resolution: '',
    };
    this.previouslySelectedProperties = {
      paper: '',
      paperid: '',
      color: '',
      duplex: '',
      duplexmode: '',
      orientation: '',
      copies: '',
      resolution: '',
    };
    /**
     *
     * Private methods
     *
     */
    /** Description... */
    this.handleCancel = () => {
      this.printCancel.emit();
    };
    /** Description... */
    this.handlePrint = () => {
      this.printInProgress = true;
      this.printService
        .printFileByUrl(authStore.state.accessToken, this.fileurl, this.filetype, this.selectedPrinter.id, 
      // we have to initialse this obj with empty strings to display the select component
      // but don't want to send any attributes with empty strings to the API
      removeEmptyStrings(this.selectedProperties), this.filename)
        .then((data) => {
        if (data.jobid) {
          printStore.state.jobID = data.jobid;
          const POLL_INTERVAL = 2000;
          const validateData = (data) => {
            if (data.jobstatus === 0) {
              this.printInProgress = false;
              return true;
            }
            return false;
          };
          poll({
            fn: this.printService.getPrintStatus,
            validate: validateData,
            interval: POLL_INTERVAL,
            maxAttempts: 10,
          })
            .then(data)
            .catch((err) => {
            console.warn(err);
            this.printInProgress = false;
          });
        }
        else {
          this.printInProgress = false;
        }
      });
      localStorage.setItem('properties', JSON.stringify(this.selectedProperties));
      localStorage.setItem('printer', JSON.stringify(this.selectedPrinter));
      localStorage.setItem('previouslySelectedProperties', JSON.stringify(this.previouslySelectedProperties));
      // this.printSubmit.emit()
    };
    this.handleUserMenu = () => {
      this.userMenuOpen = true;
    };
  }
  /**
   *
   * Listeners
   *
   */
  listenSelectSelection(event) {
    this.setSelectedProperties(event.detail);
  }
  listenUserMenuClosure() {
    this.userMenuOpen = false;
  }
  listenLogout() {
    this.printCancel.emit();
  }
  getPropertiesFromLocalStorage() {
    if (localStorage.getItem('properties')) {
      this.selectedProperties = JSON.parse(localStorage.getItem('properties'));
    }
    if (localStorage.getItem('printer')) {
      this.selectedPrinter = JSON.parse(localStorage.getItem('printer'));
    }
    else {
      this.selectedPrinter = { id: '', location: '', name: '' };
    }
    if (localStorage.getItem('previouslySelectedProperties')) {
      this.previouslySelectedProperties = JSON.parse(localStorage.getItem('previouslySelectedProperties'));
    }
  }
  getUserInfo() {
    const userService = new EzpUserService();
    return userService.getUserInfo().then((user) => {
      userStore.state.user = user;
      this.userName = userStore.state.user.display_name;
    });
  }
  setSelectedProperties(eventDetails) {
    switch (eventDetails.type) {
      case 'printer':
        this.selectedPrinter.id = eventDetails.id;
        this.selectedPrinter.name = eventDetails.title;
        break;
      case 'color':
        this.selectedProperties.color = !!eventDetails.id;
        this.previouslySelectedProperties.color = eventDetails.title;
        break;
      case 'orientation':
        this.selectedProperties.orientation = eventDetails.id;
        this.previouslySelectedProperties.orientation = eventDetails.title;
        break;
      case 'format':
        this.selectedProperties.paper = eventDetails.title;
        this.selectedProperties.paperid = eventDetails.id;
        this.previouslySelectedProperties.paper = eventDetails.title;
        this.previouslySelectedProperties.paperid = eventDetails.id;
        break;
      default:
        break;
    }
  }
  /**
   *
   * Lifecycle methods
   *
   */
  /** Description... */
  async componentWillLoad() {
    initi18n();
    this.loading = true;
    this.getPropertiesFromLocalStorage();
    this.getUserInfo();
    this.printService = new EzpPrintService(this.redirectURI, this.clientID);
    await this.printService
      .getPrinterList(authStore.state.accessToken)
      .then((printers) => {
      this.printers = printers;
    });
    await this.printService
      .getAllPrinterProperties(authStore.state.accessToken)
      .then((printerConfig) => {
      this.printerConfig = printerConfig[0];
    });
    this.loading = false;
  }
  /**
   *
   * Render method
   *
   */
  render() {
    return this.loading ? (h("ezp-progress", { status: i18next.t('printer_selection.loading') })) : (h(Host, { exportparts: "test: hello" },
      this.printInProgress ? (h("ezp-progress", { status: i18next.t('printer_selection.print_in_progress') })) : null,
      h("div", { id: "container", "data-backdrop-surface": true },
        h("div", { id: "header" },
          h("ezp-label", { weight: "heavy", text: i18next.t('printer_selection.print') + ':' }),
          h("ezp-label", { text: this.filename }),
          h("ezp-icon-button", { level: "tertiary", icon: "menu", id: "toggle-menu", type: "button", onClick: this.handleUserMenu })),
        h("div", { id: "content" },
          h("div", { id: "printer" },
            h("ezp-select", { label: i18next.t('printer_selection.printer'), icon: "printer", placeholder: i18next.t('printer_selection.select_printer'), toggleFlow: "vertical", optionFlow: "vertical", options: this.printers.map((printer) => ({
                id: printer.id,
                title: printer.name,
                meta: printer.location,
                type: 'printer',
              })), preSelected: this.selectedPrinter.name })),
          h("div", { id: "options" },
            h("ezp-select", { label: i18next.t('printer_selection.color'), placeholder: i18next.t('printer_selection.select_color'), toggleFlow: "horizontal", options: this.printerConfig.Color
                ? [
                  {
                    id: 1,
                    title: i18next.t('printer_selection.color_color'),
                    meta: '',
                    type: 'color',
                  },
                ]
                : [
                  {
                    id: 0,
                    title: i18next.t('printer_selection.color_grayscale'),
                    meta: '',
                    type: 'color',
                  },
                ], preSelected: this.previouslySelectedProperties.color }),
            h("ezp-select", { label: i18next.t('printer_selection.orientation'), placeholder: i18next.t('printer_selection.select_orientation'), toggleFlow: "horizontal", options: this.printerConfig.OrientationsSupported.map((orientation, index) => ({
                id: this.printerConfig.OrientationsSupportedId[index],
                title: i18next.t(`printer_selection.orientation_${orientation}`),
                meta: '',
                type: 'orientation',
              })), preSelected: this.previouslySelectedProperties.orientation }),
            h("ezp-select", { label: i18next.t('printer_selection.size'), placeholder: i18next.t('printer_selection.select_size'), toggleFlow: "horizontal", optionFlow: "horizontal", options: this.printerConfig.PaperFormats.map((format) => ({
                id: format.Id,
                title: i18next.t(`printer_selection.format_${format.Name}`),
                meta: `${format.XRes} x ${format.YRes}`,
                type: 'format',
              })), preSelected: this.previouslySelectedProperties.paper }),
            h("ezp-select", { label: i18next.t('printer_selection.quality'), toggleFlow: "horizontal", options: this.qualityOptions.map((option) => ({
                id: option.id,
                title: option.title,
                meta: '',
                type: 'quality',
              })), preSelected: !this.previouslySelectedProperties.resolution
                ? 'Normal'
                : this.previouslySelectedProperties.resolution }),
            h("ezp-select", { label: i18next.t('printer_selection.duplex'), toggleFlow: "horizontal", options: this.duplexOptions.map((option) => ({
                id: option.id,
                title: option.title,
                meta: '',
                type: 'duplex',
              })), preSelected: !this.previouslySelectedProperties.duplex
                ? 'None'
                : this.previouslySelectedProperties.duplexmode }),
            h("ezp-stepper", { label: "Copies", max: 10 }))),
        h("div", { id: "footer" },
          h("ezp-text-button", { type: "button", level: "secondary", onClick: this.handleCancel, label: i18next.t('button_actions.cancel') }),
          h("ezp-text-button", { type: "button", onClick: this.handlePrint, label: i18next.t('button_actions.print') })),
        h("ezp-user-menu", { open: this.userMenuOpen, name: this.userName }))));
  }
  static get is() { return "ezp-printer-selection"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ezp-printer-selection.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["ezp-printer-selection.css"]
  }; }
  static get properties() { return {
    "clientID": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Properties"
      },
      "attribute": "client-i-d",
      "reflect": false
    },
    "redirectURI": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "redirect-u-r-i",
      "reflect": false
    },
    "filename": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "filename",
      "reflect": false
    },
    "fileurl": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "fileurl",
      "reflect": false
    },
    "filetype": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "filetype",
      "reflect": false
    }
  }; }
  static get states() { return {
    "loading": {},
    "options": {},
    "printInProgress": {},
    "userMenuOpen": {},
    "userName": {},
    "printers": {},
    "selectedPrinter": {},
    "printerConfig": {},
    "selectedProperties": {},
    "previouslySelectedProperties": {}
  }; }
  static get events() { return [{
      "method": "printCancel",
      "name": "printCancel",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Description..."
      },
      "complexType": {
        "original": "MouseEvent",
        "resolved": "MouseEvent",
        "references": {
          "MouseEvent": {
            "location": "global"
          }
        }
      }
    }, {
      "method": "printSubmit",
      "name": "printSubmit",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Description..."
      },
      "complexType": {
        "original": "MouseEvent",
        "resolved": "MouseEvent",
        "references": {
          "MouseEvent": {
            "location": "global"
          }
        }
      }
    }]; }
  static get listeners() { return [{
      "name": "selectSelection",
      "method": "listenSelectSelection",
      "target": undefined,
      "capture": false,
      "passive": false
    }, {
      "name": "userMenuClosure",
      "method": "listenUserMenuClosure",
      "target": undefined,
      "capture": false,
      "passive": false
    }, {
      "name": "logoutEmitter",
      "method": "listenLogout",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}
