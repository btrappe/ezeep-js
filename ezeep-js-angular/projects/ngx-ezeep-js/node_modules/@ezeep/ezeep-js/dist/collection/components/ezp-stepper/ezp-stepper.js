import { Component, Host, Prop, State, Watch, h } from '@stencil/core';
export class EzpStepper {
  constructor() {
    /**
     *
     * Properties
     *
     */
    /** Description... */
    this.label = 'Label';
    /** Description... */
    this.min = 1;
    /**
     *
     * States
     *
     */
    /** Description... */
    this.canDecrease = true;
    /** Description... */
    this.canIncrease = true;
    /** Description... */
    this.value = 1;
    /**
     *
     * Private methods
     *
     */
    this.handleDecrease = () => {
      this.value--;
    };
    this.handleIncrease = () => {
      this.value++;
    };
    this.handleInput = () => {
      this.value = this.input.value !== '' ? parseInt(this.input.value) : this.min;
    };
  }
  /**
   *
   * Watchers
   *
   */
  watchValue() {
    this.canIncrease = this.max !== undefined ? this.value < this.max : true;
    this.canDecrease = this.min !== undefined ? this.value > this.min : true;
  }
  /**
   *
   * Lifecycle methods
   *
   */
  componentWillLoad() {
    this.watchValue();
  }
  /**
   *
   * Render method
   *
   */
  render() {
    return (h(Host, null,
      h("ezp-label", { noWrap: true, id: "label", text: this.label }),
      h("input", { id: "input", type: "number", ref: (input) => (this.input = input), min: this.min.toString(), max: this.max.toString(), value: this.value.toString(), onInput: this.handleInput }),
      h("div", { class: "buttons" },
        h("button", { class: "button", disabled: !this.canDecrease, onClick: this.handleDecrease },
          h("ezp-icon", { name: "minus" })),
        h("button", { class: "button", disabled: !this.canIncrease, onClick: this.handleIncrease },
          h("ezp-icon", { name: "plus" })))));
  }
  static get is() { return "ezp-stepper"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ezp-stepper.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["ezp-stepper.css"]
  }; }
  static get properties() { return {
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Description..."
      },
      "attribute": "label",
      "reflect": false,
      "defaultValue": "'Label'"
    },
    "max": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Description..."
      },
      "attribute": "max",
      "reflect": false
    },
    "min": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Description..."
      },
      "attribute": "min",
      "reflect": false,
      "defaultValue": "1"
    }
  }; }
  static get states() { return {
    "canDecrease": {},
    "canIncrease": {},
    "value": {}
  }; }
  static get watchers() { return [{
      "propName": "value",
      "methodName": "watchValue"
    }]; }
}
