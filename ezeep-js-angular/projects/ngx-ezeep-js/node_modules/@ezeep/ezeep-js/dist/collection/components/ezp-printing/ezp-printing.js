import { Component, Host, State, Listen, Method, h, Prop } from '@stencil/core';
import authStore, { sendCodeToParentWindow } from '../../services/auth';
import printStore, { EzpPrintService } from '../../services/print';
import config from '../../shared/config.json';
export class EzpPrinting {
  constructor() {
    /**
     *
     * States
     *
     */
    /** Description... */
    this.printOpen = false;
    this.authOpen = false;
  }
  /**
   *
   * Listeners
   *
   */
  /** Description... */
  listenPrintCancel() {
    this.printOpen = false;
  }
  /** Description... */
  listenPrintSubmit() {
    this.printOpen = false;
  }
  /** Description... */
  listenAuthCancel() {
    this.authOpen = false;
  }
  listenAuthShow() {
    this.authOpen = true;
  }
  listenPrintShow() {
    this.printOpen = true;
  }
  /**
   *
   * Public methods
   *
   */
  async open() {
    if (authStore.state.isAuthorized) {
      this.printOpen = true;
    }
    else {
      this.authOpen = true;
    }
  }
  checkAuth() {
    const printService = new EzpPrintService(this.redirecturi, this.clientid);
    let accessToken = authStore.state.accessToken;
    if (accessToken === '') {
      accessToken = localStorage.getItem('access_token');
      authStore.state.accessToken = accessToken;
    }
    if (localStorage.getItem('isAuthorized')) {
      authStore.state.isAuthorized = !!localStorage.getItem('isAuthorized');
      this.authOpen = !authStore.state.isAuthorized;
    }
    printService.getConfig(authStore.state.accessToken).catch(() => {
      authStore.state.isAuthorized = false;
    });
  }
  componentWillLoad() {
    authStore.state.redirectUri = this.redirecturi;
    if (this.authapihosturl) {
      authStore.state.authApiHostUrl = this.authapihosturl;
    }
    else {
      authStore.state.authApiHostUrl = config.authApiHostUrl;
    }
    if (this.printapihosturl) {
      printStore.state.printApiHostUrl = this.printapihosturl;
    }
    else {
      printStore.state.printApiHostUrl = config.printingApiHostUrl;
    }
    sendCodeToParentWindow();
    this.checkAuth();
  }
  /**
   *
   * Render method
   *
   */
  render() {
    return (h(Host, null, this.authOpen ? (h("ezp-auth", { clientID: this.clientid, redirectURI: this.redirecturi, hidelogin: this.hidelogin })) : this.printOpen ? (h("ezp-printer-selection", { clientID: this.clientid, redirectURI: this.redirecturi, filename: this.filename, fileurl: this.fileurl, filetype: this.filetype })) : this.custom ? (h("slot", null)) : (h("ezp-icon-button", { id: "print-trigger", icon: "printer", slot: "trigger", type: "button", onClick: () => this.open() }))));
  }
  static get is() { return "ezp-printing"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ezp-printing.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["ezp-printing.css"]
  }; }
  static get properties() { return {
    "clientid": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "clientid",
      "reflect": false
    },
    "redirecturi": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "redirecturi",
      "reflect": false
    },
    "filename": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "filename",
      "reflect": false
    },
    "fileurl": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "fileurl",
      "reflect": false
    },
    "filetype": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "filetype",
      "reflect": false
    },
    "custom": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "custom",
      "reflect": false
    },
    "hidelogin": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "hidelogin",
      "reflect": false
    },
    "authapihosturl": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "authapihosturl",
      "reflect": false
    },
    "printapihosturl": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "printapihosturl",
      "reflect": false
    }
  }; }
  static get states() { return {
    "printOpen": {},
    "authOpen": {}
  }; }
  static get methods() { return {
    "open": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Public methods",
        "tags": []
      }
    }
  }; }
  static get listeners() { return [{
      "name": "printCancel",
      "method": "listenPrintCancel",
      "target": undefined,
      "capture": false,
      "passive": false
    }, {
      "name": "printSubmit",
      "method": "listenPrintSubmit",
      "target": undefined,
      "capture": false,
      "passive": false
    }, {
      "name": "authCancel",
      "method": "listenAuthCancel",
      "target": undefined,
      "capture": false,
      "passive": false
    }, {
      "name": "authShow",
      "method": "listenAuthShow",
      "target": undefined,
      "capture": false,
      "passive": false
    }, {
      "name": "printShow",
      "method": "listenPrintShow",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}
