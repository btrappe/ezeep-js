import { Component, Host, Prop, Event, Element, Watch, h } from '@stencil/core';
import authStore from '../../services/auth';
export class EzpUserMenu {
  constructor() {
    this.backdrop = document.createElement('ezp-backdrop');
    this.links = [
      {
        title: 'Manage Account',
        icon: 'user',
        href: 'https://app.ezeep.com',
      },
      {
        title: 'Help & Support',
        icon: 'question',
        href: 'https://support.ezeep.com',
      },
      /* {
        title: 'Logout',
        icon: 'off',
        href: '#',
      }, */
    ];
    /*
    private organizations = [
      {
        id: 1,
        name: 'Organization 1',
      },
      {
        id: 2,
        name: 'Organization 2',
      },
      {
        id: 3,
        name: 'Organization 3',
      },
    ] */
    this.name = 'John Doe';
    this.open = false;
    this.handleClose = () => {
      this.userMenuClosure.emit();
    };
    this.logOut = () => {
      localStorage.clear();
      authStore.state.isAuthorized = false;
      this.logoutEmitter.emit();
    };
  }
  /**
   *
   * Privatre methods
   *
   */
  /**
   *
   * Watchers
   *
   */
  watchOpen() {
    if (this.open) {
      this.backdrop.visible = true;
      this.container.appendChild(this.backdrop);
    }
    else {
      this.backdrop.visible = false;
      this.userMenuClosure.emit();
    }
  }
  /**
   *
   * Render method
   *
   */
  componentWillLoad() {
    this.container = this.component.closest('[data-backdrop-surface]');
    this.backdrop.addEventListener('backdropHideStart', () => {
      this.open = false;
    });
    this.backdrop.addEventListener('backdropHideEnd', () => {
      this.container.removeChild(this.backdrop);
    });
  }
  /**
   *
   * Render method
   *
   */
  render() {
    return (h(Host, { class: this.open ? 'is-open' : '' },
      h("div", { id: "header" },
        h("ezp-label", { ellipsis: true, id: "name", weight: "strong", text: this.name }),
        h("ezp-icon-button", { id: "close", level: "quaternary", icon: "cross", onClick: this.handleClose })),
      h("div", { id: "links" },
        this.links.map((link) => (h("a", { class: "link", href: link.href, target: "_blank", rel: "noopener noreferrer" },
          h("ezp-icon", { class: "link__icon", name: link.icon }),
          h("ezp-label", { text: link.title })))),
        h("a", { class: "link", onClick: this.logOut },
          h("ezp-icon", { class: "link__icon", name: "off" }),
          h("ezp-label", { text: "Logout" })))));
  }
  static get is() { return "ezp-user-menu"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ezp-user-menu.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["ezp-user-menu.css"]
  }; }
  static get properties() { return {
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "name",
      "reflect": false,
      "defaultValue": "'John Doe'"
    },
    "open": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "open",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get events() { return [{
      "method": "userMenuClosure",
      "name": "userMenuClosure",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Events"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "logoutEmitter",
      "name": "logoutEmitter",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "component"; }
  static get watchers() { return [{
      "propName": "open",
      "methodName": "watchOpen"
    }]; }
}
